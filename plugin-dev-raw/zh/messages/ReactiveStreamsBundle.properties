# all properties for Reactor and RxJava

inspections.nullchecking.null.in.lambda.name=在轉換方法中從 lambda 返回 null 或可為 null 的內容
inspections.nullchecking.null.in.lambda.description=在轉換方法中從 lambda 返回 null 或可為 null 的內容
inspections.publisher.implementation.name=類別實作發布者
inspections.publisher.problem.description=類別實作發布者
inspections.subscriber.implementation.name=類別實作訂閱者
inspections.subscriber.problem.description=類別實作訂閱者
inspections.group.name=通用
inspections.group.name.reactor=Reactor

inspections.unfinished.step.verifier.name=未完成的 StepVerifier

inspections.subscribe.in.non.blocking.scope.name=在 "reactive" 方法中呼叫 'subscribe'
inspections.blocking.in.non.blocking.quickfix.name=尋找原因
inspections.blocking.in.non.blocking.quickfix.text=非阻塞作用域，因為在 {0} 上進行了排程
inspections.blocking.in.non.blocking.quickfix.alternative.text=非阻塞作用域，因為 {0} 使用 {1}
inspections.too.long.map.chain.name=相同方法鏈過長
inspections.too.long.map.chain.description={0} 鏈過長。可能導致性能開銷
inspections.too.long.map.chain.settings.field=允許的最長相同方法鏈長度
inspections.throw.in.operator.name=Throw 語句位於 Reactive 運算符中
inspections.throw.in.operator.description=Throw 語句位於 {0} {1} {2} 中
inspections.unused.publisher.name=未使用的發布者
inspections.unused.publisher.description=值從未被用作發布者
inspections.debug.initialization.name=不必要的偵錯初始化

intention.collapse.filter.with.previous.name=通過上一個篩選器摺疊
intention.collapse.map.with.previous.name=通過上一個映射摺疊
intention.collapse.category.key=Reactor/將相同運算符呼叫摺疊為一個呼叫
settings.is.stack.frame.customization.enabled.field=啟用 Reactor 偵錯模式
settings.debugger.panel.title=偵錯器
setting.display.name=Reactive Streams
setting.inspections.configuration.title=檢查組態
setting.advanced.non.blocking.analysis=使用進階分析檢測非阻塞作用域
setting.advanced.non.blocking.analysis.description=搜尋並處理 subscribeOn() 和 publishOn() 運算符
settings.initialization.method.label=偵錯方法初始化方法:
settings.initialization.method.hooks=Hooks.onOperatorDebug()
settings.initialization.method.agent=ReactorDebugAgent.init()
settings.initialization.method.details=更多詳細資訊
settings.initialization.method.hooks.link=https://projectreactor.io/docs/core/release/reference/#debug-activate
settings.initialization.method.agent.link=https://projectreactor.io/docs/core/release/reference/#reactor-tools-debug
settings.initialization.method.agent.comment=僅當 io.projectreactor:reactor-tools 位於類別路徑中且 Reactor 版本為 3.3.0 或更高版本時才有效
settings.initialization.method.none=無
settings.initialization.method.agent.problem.notification=無法呼叫 ReactorDebugAgent.init() 時通知
intention.replace.all.throw.statements.quickfix.name=將 lambda 中的所有 throw 取代為 {0}
intention.replace.throw.statement.quickfix.name=將 throw 取代為 {0}
notifications.agent.impossible.message.pattern=由於 {1}，無法將 ReactorDebugAgent 與 <b>{0}</b> 組態搭配使用
notifications.first.debug.message=要組態偵錯模式初始化方法嗎?
notifications.first.debug.action.text=組態…
notifications.first.debug.title=已啟用 Reactor 偵錯模式
notifications.title=Reactor 偵錯模式
notifications.version.error=Reactor 版本低於 3.3.0
notifications.classpath.error=ReactorDebugAgent 不在類別路徑中
postfix.template.condition.non.void.name=reactor
inspections.blocking.in.non.blocking.add.publishOn.quickfix.text=新增帶有 ''{1}'' 實參的 ''{0}'' 以切換到阻塞上下文
inspections.subscription.in.reactive.scope.text=不建議在非阻塞上下文中呼叫 'subscribe'
inspections.group.name.mutiny=Mutiny
notification.group.reactor.silent=Reactor 偵錯模式失敗
notification.group.reactor.loud=已啟用 Reactor 偵錯模式
inspections.monovoid.mono.with.map.transformation=使用 Mono<Void> 類型在接收器上呼叫 {0}
inspections.monovoid.mono.with.map.transformation.description=在 Mono<Void> 上呼叫轉換方法 {0}，呼叫不會有任何效果
inspections.monovoid.mono.with.zip.transformation=Zip 包含 Mono<Void> 類型的參數
inspections.monovoid.mono.with.zip.transformation.description=使用 Mono<Void> 參數呼叫 {0} 方法不會有任何效果