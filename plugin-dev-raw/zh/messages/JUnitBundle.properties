action.AddToISuite.text=新增到 JUnit 模式套件
action.excludeFromSuite.text=從套件中排除
action.text.test.category={0} 的測試
action.text.test.tags={0} 的測試
action.text.test.unknown.target=未知
cannot.browse.test.inheritors.dialog.title=無法瀏覽TestCase繼承器
category.interface.dialog.title=類別接口
category.is.not.specified.error.message=未指定類別
category.label=類別
change.list.label=更改列表
class.isnt.inheritor.of.testcase.error.message={0}沒有繼承人的TestCase
class.not.test.error.message=類別 ''{0}'' 不是測試
combobox.changelists.all=所有
configuration.not.specified.message=組態測試類型未指定\: {0}
create.setup.dialog.message=方法 setUp 已存在，但未使用 {0} 註解。是否註解?
create.setup.dialog.title=建立 setUp 方法
default.junit.config.empty.category=無效
default.junit.config.name.all.in.module={0}中的所有
default.junit.config.name.all.in.package.in.module={1}中的{0}
default.junit.config.name.category=@Category({0})
default.junit.config.name.tags=標記({0})
default.junit.config.name.temp.suite=臨時套件
default.junit.config.name.whole.project=整個專案
default.junit.configuration.name=<無名稱>
dialog.message.failed.to.resolve.maven.id=無法解析 {0}
dialog.message.no.unique.id.specified.exception=未指定唯一 ID
dialog.title.preparing.test=正在準備測試
directory.0.is.not.found.error.message=找不到目錄 ''{0}''
directory.is.not.specified.error.message=未指定目錄
directory.label=目錄
directory.not.found.error.message=未找到目錄 ''{0}''
expected.exception.never.thrown.display.name=Expected exception never thrown in test method body
expected.exception.never.thrown.problem.descriptor=Expected <code>\#ref</code> never thrown in body of ''{0}()'' \#loc
fix.data.provider.create.method.fix.name=Create data provider method '@Parameters public static Iterable<Object> parameters()'
fix.data.provider.multiple.methods.problem=Multiple @Parameters data provider methods present in class <code>\#ref</code>
fix.data.provider.signature.family.name=Fix data provider method signature
fix.data.provider.signature.fix.name=Change method signature to ''{0}''
fix.data.provider.signature.incorrect.problem=Data provider method <code>\#ref()</code> has an incorrect signature
fix.data.provider.signature.missing.method.problem=Parameterized test class <code>\#ref</code> lacks data provider method annotated with '@Parameters'
fork.mode.label=複刻模式(&F)\:
fork.mode.name=複刻模式
inspection.parameterized.parameters.static.collection.display.name=Parameterized test class without data provider method
junit.config.with.parameter.0=帶有參數“{0}”
junit.configuration.across.module.dependencies.radio=跨模組相依項
junit.configuration.class.label=類別\:
junit.configuration.description=JUnit 測試組態
junit.configuration.display.name=JUnit
junit.configuration.fork.mode.class=類別
junit.configuration.fork.mode.method=方法
junit.configuration.fork.mode.none=無
junit.configuration.fork.mode.repeat=重複
junit.configuration.in.single.module.radio=在單一模組
junit.configuration.in.whole.project.radio=在整個專案
junit.configuration.kind.all.in.directory=目錄中的所有
junit.configuration.kind.all.in.package=軟體套件中的所有
junit.configuration.kind.by.pattern=模式
junit.configuration.kind.by.tags=標記
junit.configuration.kind.by.unique.id=UniqueId
junit.configuration.kind.category=類別
junit.configuration.kind.class=類別
junit.configuration.kind.method=方法
junit.configuration.method.label=方法\:
junit.configuration.package.label=包\:
junit.configuration.repeat.mode.n.times=N 次
junit.configuration.repeat.mode.once=一次
junit.configuration.repeat.mode.until.failure=直至失敗
junit.configuration.repeat.mode.until.stopped=直至停止
junit.configuration.repeat.mode.until.success=直到成功
junit.configuration.search.for.tests.label=搜尋測試\:
junit.entry.point.suggest.package.private.visibility.junit5=建議 Junit 5 測試的 package-private 可見性級別
junit.not.found.in.module.error.message=在模組''{0}''中未找到JUnit
junit3.style.test.method.in.junit4.class.display.name=Old style JUnit test method in JUnit 4 class
junit3.style.test.method.in.junit4.class.problem.descriptor=Old style JUnit test method <code>\#ref()</code> in JUnit 4 class \#loc
junit5.migration.description=將 JUnit 4 測試註解轉移到新的 Jupiter 註解中時，可能會導致出現紅色程式碼\! 不會遷移斷言。請參閱“Java | JUnit 問題 | JUnit 4 測試可能為 JUnit 5”檢查，只遷移可以完全自動轉換的測試。
jvm.inspections.migrate.assert.to.matcher.description=Assert expression <code>\#ref</code> can be replaced with ''{0}'' call \#loc
method.name.not.specified.error.message=未指定方法名稱
module.does.not.exists=模組''{0}''不存在於專案''{1}''
module.to.choose.classpath.not.specified.error.message=未指定從中選擇類別路徑的模組
multiple.exceptions.declared.on.test.method.display.name=Multiple exceptions declared on test method
multiple.exceptions.declared.on.test.method.problem.descriptor=<code>\#ref</code> could be replaced with 'throws Exception' \#loc
no.module.selected.error.message=未選擇模組
no.pattern.error.message=未選擇模式
no.test.class.specified.error.text=未指定測試類別
package.does.not.exist.error.message=軟體套件 ''{0}'' 不存在
pattern.label=模式
progress.title.download.additional.dependencies=下載其他相依項…
repeat.count.label=重複計數(&R)\:
repeat.label=重複(&R)\:
repeat.name=重複
running.tests.disabled.during.index.update.error.message=執行測試在索引更新期間處於停用狀態
search.scope.module=在單個模組中
search.scope.module.deps=在模組相依項中
search.scope.name=搜尋測試
search.scope.project=在整個專案中
tag.expression.label=標記表達式
tag.name.0.must.be.syntactically.valid.warning=標記名稱 [{0}] 的語法必須有效
tags.are.not.specified.error.message=未指定標記
test.class.hint=包含測試的類別的完全限定名稱
test.discovery.by.all.changes.combo.item=所有
test.group=測試
test.kind.hint=用於搜尋測試的資源類型
test.method.doesnt.exist.error.message=測試方法''{0}''不存在
test.method.hint=測試方法的完全限定名稱
test.package.hint=包含測試的軟體套件的名稱
test.pattern.hint=用於符合包含測試的類別的名稱的正則表達式
uniqueid.label=UniqueId
unused.declaration.junit.test.entry.point=JUnit 測試用例
usage.of.obsolete.assert.display.name=Usage of obsolete 'junit.framework.Assert' method
use.of.obsolete.assert.problem.descriptor=Call to <code>\#ref()</code> from ''{0}'' should be replaced with call to method from ''org.junit.Assert'' \#loc
use.of.obsolete.assert.quickfix=Replace with 'org.junit.Assert' method call
