inspection.jvm.languages.group.name=JVM 語言
jvm.inspections.sql.source.to.sink.flow.display.name=不安全字串被用作 SQL
jvm.inspections.sql.source.to.sink.flow.too.complex=太複雜，無法檢查 SQL 中使用的字串是否安全
jvm.inspections.sql.source.to.sink.flow.unsafe=在 SQL 中使用的字串可能不安全
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field=將同一類別中的 private 或 final 欄位視為安全欄位
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field.comment=如果啟用，則 private 或 final 欄位被認為是安全的，否則將根據規則進行處理
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods=將 private 方法的參數視為安全
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods.comment=如果停用，private 方法的參數將被視為未知
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex=報告過於複雜而無法驗證的字串
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex.comment=手動檢查此類別字串可能很有用
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class=安全類別\:
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class.comment=這些類別被視為只包含安全資料
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations=未被污染的註解\:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations.comment=這些註解將在分析過程中用作 '@Untainted' 註解
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods=未被污染的方法\:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods.comment=這些方法被視為只返回安全的物件
