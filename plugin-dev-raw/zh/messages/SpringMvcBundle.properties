DumpSpringMVCModelAction.gathering.spring.mvc.models=正在收集 Spring MVC 模型…
DumpSpringMVCModelAction.scanning.spring.mvc.models=正在掃描 Spring MVC 模型…
SpringMVCInitBinderInspection.method.annotated.with.initbinder.must.return.void=使用 @InitBinder 註解的方法必須返回 void
SpringMvcRequestMappingRelatedItemLineMarkerProvider.related.views=相關檢視
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.caption=<html><body><b>{0}</b> 的檢視(目前找到 {1} 個)</body></html>
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.finished.caption=<html><body><b>{0}</b> 的檢視(找到 {1} 個)</body></html>
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.title=正在搜尋請求映射 {0}
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.title=請求映射 {0}
SpringMvcRequestMappingRelatedItemLineMarkerProvider.spring.view=Spring 檢視
SpringMvcView.designer.properties.show.javadoc=顯示文檔
SpringMvcView.request.method=請求方法
SpringMvcVtlGlobalVariableProvider.model.attribute=模型特性
ViewReference.cannot.resolve.mvc.view=無法解析 MVC 檢視 ''{0}''
ViewReference.no.view.resolvers.found=未找到檢視解析器
action.DumpSpringMVCModel.text=傾印 Spring MVC 模型
action.DumpSpringModulesSorter.text=已排序的傾印 URL 模組
action.ExceptionHandlerTemplateGenerateAction.description=生成異常處理程序
action.ExceptionHandlerTemplateGenerateAction.text=異常處理程序
action.GenerateSpringEndpointAction.description=生成請求映射方法
action.GenerateSpringEndpointAction.text=請求映射…
action.Spring.Create.Endpoint.dialog.title=新增請求映射
action.Spring.Create.Endpoint.text.empty=/路徑
action.export.openapi.draft=生成 OpenAPI 草稿
cannot.resolve.controller.url=無法解析控制器 URL ''{0}''
cors.mapping.method.unresolved.message=無效方法 ''{0}''
documentation.provider.consumes=消耗
documentation.provider.headers=標頭
documentation.provider.methods=方法
documentation.provider.model.attributes=模型特性
documentation.provider.params=參數
documentation.provider.path.variables=路徑變數
documentation.provider.produces=生成
live.template.controller.description=Spring '@Controller' 模板
live.template.delete.mapping.description=Spring MVC '@DeleteMapping' 模板
live.template.exceptionHandler.description=Spring `@ExceptionHandler` 模板
live.template.get.mapping.description=Spring MVC '@GetMapping' 模板
live.template.patch.mapping.description=Spring MVC '@PatchMapping' 模板
live.template.post.mapping.description=Spring MVC '@PostMapping' 模板
live.template.put.mapping.description=Spring MVC '@PutMapping' 模板
live.template.request.mapping.description=Spring MVC '@RequestMapping' 模板
logical.spring.controller.endpoints=端點
logical.spring.controller.mapping.views=檢視
logical.spring.functional.endpoints=端點
method.name.delete=Delete
method.name.get=Get
method.name.patch=Patch
method.name.post=Post
method.name.put=Put
method.name.request=Request
mvc.application.context.autodetected=MVC 套用程序上下文
mvc.controller=控制器
mvc.framework.name=Spring MVC
mvc.goto.related.item.group.name=Spring MVC
mvc.initializer.context.autodetected=MVC {0} 初始設定式 servlet 上下文
mvc.inspection.group.name=Spring MVC
mvc.inspection.init.binder=非 void @InitBinder 方法
mvc.inspection.path.variable=@PathVariable 宣告和用法不符合
mvc.inspection.view.reference=未解析的檢視參照
mvc.servlet.context.autodetected=MVC {0} servlet 上下文
mvc.tab.title=MVC
progress.creating.endpoint=正在建立請求映射
request.mapping.gutter.name=請求映射
request.mapping.gutter.open.in.http.name=在 HTTP 客戶端中開啟
request.mapping.gutter.views.name=導覽到相關檢視
resource.location.unresolved.message=無法解析位置 ''{0}''
spring.component.template.controller=控制器
spring.component.template.controllerAdvice=控制器建議
spring.component.template.restController=REST 控制器
spring.controller.request.param.help.authenticatedPrincipal=用於將 Authentication.getPrincipal() 解析為方法實參的註解。
spring.controller.request.param.help.bindingResult=用於存取指令物件(即 @ModelAttribute 實參)的驗證和資料綁定錯誤，或 @RequestBody 或 @RequestPart 實參驗證的錯誤。必須緊跟在已驗證的方法實參之後宣告 Errors 或 BindingResult 實參。
spring.controller.request.param.help.csrfToken=提供有關預期 CSRF 令牌的資訊。
spring.controller.request.param.help.errors=用於存取指令物件(即 @ModelAttribute 實參)的驗證和資料綁定錯誤，或 @RequestBody 或 @RequestPart 實參驗證的錯誤。必須緊跟在已驗證的方法實參之後宣告 Errors 或 BindingResult 實參。
spring.controller.request.param.help.httpEntity=用於存取請求標頭和正文。正文使用 HttpMessageConverter 進行轉換。
spring.controller.request.param.help.httpMethod=請求的 HTTP 方法。
spring.controller.request.param.help.httpSession=強制會話的存在。因此，此類別實參永遠不會為 null。請注意，會話存取並非執行緒安全。
spring.controller.request.param.help.inputStream=用於存取由 Servlet API 公開的原始請求正文。
spring.controller.request.param.help.locale=當前請求區域設定，由最具體的可用 LocaleResolver (實際上是組態的 LocaleResolver 或 LocaleContextResolver)確定。
spring.controller.request.param.help.map=用於存取 HTML 控制器中使用的模型，並作為檢視呈現的一部分公開給模板。
spring.controller.request.param.help.model=用於存取 HTML 控制器中使用的模型，並作為檢視呈現的一部分公開給模板。
spring.controller.request.param.help.modelMap=用於存取 HTML 控制器中使用的模型，並作為檢視呈現的一部分公開給模板。
spring.controller.request.param.help.nativeWebRequest=對請求參數、請求特性和會話特性的通用存取，無需直接使用 Servlet API。
spring.controller.request.param.help.oAuth2AuthorizedClient=此接口的實作負責授權客戶端的整體管理。
spring.controller.request.param.help.outputStream=用於存取由 Servlet API 公開的原始響應正文。
spring.controller.request.param.help.pagination=保留分頁資訊的物件。
spring.controller.request.param.help.principal=當前經過身份驗證的使用者，可能是特定的 Principal 實作類別(如果已知)。請注意，如果註解了此實參，則其不會立即解析，以便允許自訂解析器在通過 HttpServletRequest\#getUserPrincipal 回退到預設解析之前對其進行解析。例如，Spring Security 身份驗證實作了 Principal，並將通過 HttpServletRequest\#getUserPrincipal 注入，除非它也用 @AuthenticationPrincipal 註解，在這種情況下，它將由自訂 Spring Security 解析器通過 Authentication\#getPrincipal 進行解析。
spring.controller.request.param.help.pushBuilder=用於編程式 HTTP/2 資源推送的 Servlet 4.0 推送建置器 API。請注意，根據 Servlet 規範，如果客戶端不支持該 HTTP/2 功能，則注入的 PushBuilder 實例可以為 null。
spring.controller.request.param.help.reader=用於存取由 Servlet API 公開的原始請求正文。
spring.controller.request.param.help.redirectAttributes=指定在重新導向的情況下要使用的特性(即追加到查詢字串)以及在重新導向後的請求之前臨時存儲的閃存特性。
spring.controller.request.param.help.servletRequest=對 servlet 請求的通用存取
spring.controller.request.param.help.servletResponse=對 servlet 響應的通用存取
spring.controller.request.param.help.sessionStatus=用於將表單處理標記為已完成，這將觸發通過類別級別 @SessionAttributes 註解宣告的會話特性的清理。
spring.controller.request.param.help.sort=查詢的排序選項。您必須至少提供一個要排序的屬性列表，這些屬性不得包含 null 或空字串。方向預設為 DEFAULT_DIRECTION。
spring.controller.request.param.help.uriComponentsBuilder=用於準備相對於當前請求的主機、連接埠、方案、上下文路徑和 servlet 映射的字面量部分的 URL。
spring.controller.request.param.help.webRequest=擴展 ServletRequest 接口以提供 HTTP servlet 的請求資訊。servlet 容器會建立一個 HttpServletRequest 物件並將其作為實參傳遞給 servlet 的服務方法(doGet、doPost 等)。
spring.controller.request.param.help.webResponse=擴展 ServletResponse 接口以提供發送響應時 HTTP 特定的功能。例如，它具有存取 HTTP 標頭和 Cookie 的方法。servlet 容器會建立一個 HttpServletResponse 物件並將其作為實參傳遞給 servlet 的服務方法(doGet、doPost 等)。
spring.controller.request.param.help.writer=用於存取由 Servlet API 公開的原始響應正文。
spring.controller.request.param.help.zoneId=與當前請求關聯的時區，由 LocaleContextResolver 確定。
spring.mvc.controllers.not.found=未找到 Spring MVC 控制器
spring.reactive.web.client.endpoints.view.title=Spring Reactive WebClient
spring.reactive.web.test.client.endpoints.view.title=Spring WebTestClient
spring.rest.client.endpoints.view.title=Spring RestClient
spring.rest.operations.endpoints.view.title=Spring RestOperations
spring.test.mock.mvc.endpoints.view.title=Spring MockMvc
spring.test.rest.template.endpoints.view.title=Spring TestRestTemplate
