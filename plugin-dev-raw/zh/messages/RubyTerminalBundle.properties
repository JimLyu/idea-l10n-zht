bundle.subcommands.cache.description=將所需的 .gem 檔案打包到您的應用程式中
bundle.subcommands.config.description=設定 Bundler 組態選項
bundle.subcommands.help.description=顯示每個子指令的詳細幫助
bundle.subcommands.install.description=安裝 Gemfile 或 Gemfile.lock 指定的 gem
bundle.subcommands.install.trust.policy.argument.display.name=策略
bundle.subcommands.install.trust.policy.description=套用 RubyGems 安全策略 <{0}>
bundle.subcommands.plugin.description=管理 Bundler 延伸模組
bundle.subcommands.plugin.subcommands.help.description=描述多個子指令或一個特定的子指令
bundle.subcommands.plugin.subcommands.install.description=從提供的 RubyGems 源(使用 --source 選項)、從提供的 git 源(使用 --git)或從提供的本地路徑(使用 --path)安裝延伸模組。如果沒有提供源，則使用 Gem.sources
bundle.subcommands.plugin.subcommands.install.options.branch.description=要簽出的 git 分支
bundle.subcommands.plugin.subcommands.install.options.git.description=要從中提取的 git 儲存庫的 URL
bundle.subcommands.plugin.subcommands.install.options.local.git.description=要從中提取的本地 git 儲存庫的路徑(已棄用)
bundle.subcommands.plugin.subcommands.install.options.path.description=要直接使用的本地 gem 的路徑
bundle.subcommands.plugin.subcommands.install.options.ref.description=要簽出的 git 修訂
bundle.subcommands.plugin.subcommands.install.options.source.description=要從中提取延伸模組的 RubyGems 源的 URL
bundle.subcommands.plugin.subcommands.install.options.version.description=要提取的延伸模組的版本
bundle.subcommands.plugin.subcommands.list.description=列出已安裝的延伸模組和可用指令
bundle.subcommands.plugin.subcommands.uninstall.description=移除給定延伸模組列表。要移除所有延伸模組，請使用 -all 選項。
bundle.subcommands.plugin.subcommands.uninstall.options.all.description=移除所有已安裝的延伸模組。如果沒有安裝延伸模組，則不執行任何動作。
bundle.subcommands.remove.argument.display.name=gem
bundle.subcommands.remove.description=從 Gemfile 中移除 gem
bundle.subcommands.remove.options.install.description=從 Gemfile 中移除給定gem 後，執行 bundle install，這可以確保鎖定檔案和磁碟上安裝的 gem 也得到更新，以移除給定 gem
bundle.subcommands.version.description=列印 Bundler 版本資訊
irb.options.backtrace.limit.description=顯示回溯前 n 行和後 n 行
irb.options.encoding.argument.display.name=ex[\:in]
irb.options.encoding.description=設定預設的外部(ex)和內部(in)編碼(與 'ruby -E' 相同)
irb.options.help.description=列印幫助
irb.options.prompt.argument.display.name=prompt-mode
irb.options.prompt.description=設定提示模式。預定義的提示模式為\: 'default'、'classic'、'simple'、'inf-ruby'、'xmp'、'null'。
irb.options.simple.prompt.description=將提示模式設定為 'simple'
irb.options.version.description=列印 irb 的版本
irb.options.warning.level.argument.display.name=級別
irb.options.warning.level.description=設定警告級別\: 0\=免打擾，1\=中等，2\=詳細(與 'ruby -W' 相同)
rails.options.help.description=顯示幫助訊息並離開
rails.options.version.description=顯示 Rails 版本號並離開
rails.subcommands.console.description=從命令行與您的 Rails 應用程式互動
rails.subcommands.console.options.environment.description=指定執行此主控台的環境(測試/開發/生產)
rails.subcommands.console.options.sandbox.description=離開時回滾資料庫修改
rails.subcommands.dbconsole.description=為 config/database.yml 中指定的資料庫啟動主控台
rails.subcommands.dbconsole.options.database.description=指定要使用的資料庫
rails.subcommands.dbconsole.options.environment.description=執行 `dbconsole` 的環境(例如，測試/開發/生產)
rails.subcommands.dbconsole.options.mode.description=自動將 sqlite3 資料庫置於指定模式
rails.subcommands.dbconsole.options.password.description=自動提供來自 database.yml 的密碼
rails.subcommands.generate.description=用法\: rails generate GENERATOR [args] [options]
rails.subcommands.generate.options.force.description=覆蓋已存在的檔案
rails.subcommands.generate.options.help.description=列印產生器的選項和用法
rails.subcommands.generate.options.pretend.description=執行但不進行任何更改
rails.subcommands.generate.options.quiet.description=禁止狀態輸出
rails.subcommands.generate.options.skip.description=跳過已存在的檔案
rails.subcommands.new.argument.path.display.name=路徑
rails.subcommands.new.description=建立一個新的 Rails 應用程式
rails.subcommands.routes.description=列出您的應用程式中定義的所有路由
rails.subcommands.routes.options.controller.description=按特定控制器篩選，例如 PostsController 或 Admin\:\:PostsController
rails.subcommands.routes.options.expanded.description=垂直列印展開的路由並附帶各部分的說明
rails.subcommands.routes.options.grep.description=按特定模式對路由執行 grep 指令
rails.subcommands.server.description=啟動 Web 伺服器以通過瀏覽器存取您的應用程式
rails.subcommands.server.options.binding.description=將 Rails 綁定到指定的 IP - 在開發中預設為 'localhost'，在其他環境中預設為 '0.0.0.0'
rails.subcommands.server.options.config.description=使用自訂 rackup 組態。預設值\: config.ru。
rails.subcommands.server.options.daemon.description=將伺服器作為守護程序執行
rails.subcommands.server.options.dev.caching.description=指定開發中是否執行快取
rails.subcommands.server.options.early.hints.description=啟用 HTTP/2 早期提示
rails.subcommands.server.options.environment.description=指定執行此伺服器的環境(例如，測試/開發/生產)
rails.subcommands.server.options.log.to.stdout.description=是否記錄到 stdout。在開發過程中，未啟用守護程序時預設啟用。
rails.subcommands.server.options.pid.description=指定 PID 檔案 - 預設為 tmp/pids/server.pid
rails.subcommands.server.options.port.description=在指定連接埠上執行 Rails - 預設為 3000
rails.subcommands.server.options.using.description=指定用於執行應用程式的 Rack 伺服器(thin/puma/webrick)
rails.subcommands.test.argument.display.name=檔案或目錄
rails.subcommands.test.description=執行測試套件
rbenv.subcommands.install.options.force.description=允許覆蓋現有的已安裝版本
rbenv.subcommands.install.options.keep.description=安裝後將源樹保留在 RBENV_BUILD_ROOT 中(預設為“RBENV_ROOT/sources”)
rbenv.subcommands.install.options.list.all.description=列出所有本地版本，包括過時的版本
rbenv.subcommands.install.options.list.description=列出每個 Ruby 的最新穩定版本
rbenv.subcommands.install.options.patch.description=在建置之前套用來自 stdin 的補丁
rbenv.subcommands.install.options.skip.existing.description=避免覆蓋現有的已安裝版本
rbenv.subcommands.install.options.verbose.description=詳細模式\: 將所有建置輸出轉發到 stdout/stderr
rbs.options.collection.description=收集組態的檔案路徑(預設值\: rbs_collection.yaml)
rbs.options.dir.description=從目錄載入 RBS 檔案
rbs.options.library.description=載入庫的 RBS 檔案
rbs.options.log.level.description=指定日誌級別(預設為 `warn`)
rbs.options.log.output.description=指定要輸出日誌的檔案(預設為 stderr)
rbs.options.no.collection.description=忽略收集組態
rbs.options.no.stdlib.description=跳過載入標準庫簽名
rbs.options.repo.description=新增 RBS 儲存庫
rbs.subcommands.ancestors.description=顯示給定類別或模組的上級
rbs.subcommands.ancestors.options.instance.description=給定 type_name 的實例的上級(預設)
rbs.subcommands.ancestors.options.singleton.description=給定 type_name 的單例的上級
rbs.subcommands.annotate.description=從 RDoc 匯入文檔並更新 RBS 檔案
rbs.subcommands.annotate.options.arglists.description=生成實參列表部分(預設為 true)
rbs.subcommands.annotate.options.dir.description=從 DIRNAME 載入 RDoc
rbs.subcommands.annotate.options.filename.description=在文檔中包含原始檔名(預設為 true)
rbs.subcommands.annotate.options.gems.description=從 gem 載入 RDoc (預設為 false)
rbs.subcommands.annotate.options.home.description=從主目錄載入 RDoc (預設為 false)
rbs.subcommands.annotate.options.site.description=從站點目錄載入 RDoc (預設為 false)
rbs.subcommands.annotate.options.system.description=從系統載入 RDoc (預設為 true)
rbs.subcommands.ast.description=列印已載入環境的 JSON AST
rbs.subcommands.collection.description=管理 RBS 集合，其中包含第三方 RBS
rbs.subcommands.constant.description=基於 RBS 解析常數
rbs.subcommands.constant.options.context.description=常數解析開始的模組的名稱
rbs.subcommands.list.description=列出類別、模組和接口
rbs.subcommands.list.options.class.description=列出類別
rbs.subcommands.list.options.interface.description=列出接口
rbs.subcommands.list.options.module.description=列出模組
rbs.subcommands.method.description=顯示由 type_name 和 method_name 指定的方法的資訊
rbs.subcommands.method.options.instance.description=顯示實例方法(預設)
rbs.subcommands.method.options.singleton.description=顯示單例方法
rbs.subcommands.methods.description=顯示類別或模組中定義的方法
rbs.subcommands.methods.options.inherit.description=同時顯示在超類別與混合模組中定義的方法
rbs.subcommands.methods.options.instance.description=顯示實例方法(預設)
rbs.subcommands.methods.options.singleton.description=顯示單例方法
rbs.subcommands.parse.description=解析給定 RBS 檔案並列印任何語法錯誤
rbs.subcommands.paths.description=顯示從中載入 RBS 檔案的目錄路徑
rbs.subcommands.prototype.description=生成 RBS 檔案原型。支援的產生器包括 rb、rbi、runtime。
rbs.subcommands.test.options.double.suite.description=設定正在使用的雙重套件(當前支援\: rspec | minitest)
rbs.subcommands.test.options.sample.size.description=設定範例大小
rbs.subcommands.test.options.target.description=設定執行時測試目標
rbs.subcommands.test.options.unchecked.class.description=設定不會被檢查的類別
rbs.subcommands.validate.description=驗證 RBS 檔案。這樣可以確保 RBS 檔案中存在類型名稱並且類型應用程式具有正確的實參數量。
rbs.subcommands.vendor.description=專案目錄中的供應商簽名。此指令會忽略 RBS 載入全域選項 `-r` 和 `-I`。
rbs.subcommands.vendor.options.clean.description=清理供應商目錄(預設值\: no)
rbs.subcommands.vendor.options.vendor.dir.description=指定供應商簽名的目錄(預設值\: vendor/sigs)
rspec.options.bisect.description=反覆執行該套件，以便將故障隔離到最小的可重現案例
rspec.options.force.color.description=強制輸出為彩色，即使輸出不是 TTY
rspec.options.format.argument.documentation.description=組和範例名稱
rspec.options.format.argument.failures.description=“file\:line\:reason”，適用於編輯器整合
rspec.options.format.argument.progress.description=預設 - 點
rspec.options.format.description=選擇格式化程序
rspec.options.help.description=顯示幫助訊息
rspec.options.no.color.description=強制輸出為非彩色，即使輸出是 TTY
rspec.options.order.argument.defined.description=範例和組按其定義的順序執行
rspec.options.order.argument.rand.description=隨機化組和範例的順序。您可以指定種子，例如 --order random\:123。
rspec.options.order.argument.random.description=rand 的別名
rspec.options.order.argument.recently.modified.description=首先執行最近修改的檔案
rspec.options.order.description=按指定的順序類型執行範例
rspec.options.path.description=指定要新增到 $LOAD_PATH 的 PATH (可以多次使用)
rspec.options.pattern.description=載入與模式符合的檔案(預設值\:“spec/**/*_spec.rb”)
rspec.options.tag.description=執行帶有指定標籤的範例，或者在標籤前新增 ~ 來排除範例
ruby.options.backtrace.limit.argument.display.name=數量
ruby.options.backtrace.limit.description=限制回溯的最大長度
ruby.options.dump.argument.display.name=目標
ruby.options.dump.argument.help.description=顯示長幫助訊息(與 --help 相同)
ruby.options.dump.argument.insns.description=列印反匯編的位元組碼指令列表
ruby.options.dump.argument.insns_without_opt.description=在套用各種最佳化之前列印反匯編的位元組碼指令列表
ruby.options.dump.argument.parsetree.description=列印程序的 Ruby AST 文本表示
ruby.options.dump.argument.parsetree_with_comment.description=列印程序的 Ruby AST 文本表示，但每個節點都帶有相關的 Ruby 原始碼註解
ruby.options.dump.argument.syntax.description=檢查語法(與 -c --yydebug 相同)
ruby.options.dump.argument.usage.description=列印簡短的用法訊息(與 -h 相同)
ruby.options.dump.argument.version.description=列印版本描述(與 --version 相同)
ruby.options.dump.argument.yydebug.description=啟用編譯器偵錯模式(與 --yydebug 相同)
ruby.options.dump.description=傾印一些資訊
ruby.options.encoding.argument.display.name=external[\:internal]
ruby.options.encoding.description=指定外部編碼和內部編碼的預設值。\n值應以冒號(\:)分隔。
ruby.options.external.internal.encoding.argument.display.name=編碼
ruby.options.external.internal.encoding.description=指定預設的外部或內部字元編碼
ruby.options.features.argument.description=啟用或停用 {0}
ruby.options.features.argument.did.you.mean.description=did_you_mean (預設值\: 啟用)
ruby.options.features.argument.display.name=功能
ruby.options.features.argument.error.highlight.description=error_highlight (預設值\: 啟用)
ruby.options.features.argument.frozen.string.literal.description=凍結所有字串字面量(預設值\: 停用)
ruby.options.features.argument.gems.description=rubygems (僅用於偵錯，預設值\: 啟用)
ruby.options.features.argument.mjit.description=基於 C 編譯器的 JIT 編譯器(預設值\: 停用)
ruby.options.features.argument.rubyopt.description=RUBYOPT 環境變數(預設值\: 啟用)
ruby.options.features.argument.yjit.description=程序內 JIT 編譯器(預設值\: 停用)
ruby.options.features.description=啟用或停用功能
ruby.options.jit.description=啟用程序內 JIT 編譯器(實驗性)
ruby.options.mjit.description=啟用基於 C 編譯器的 JIT 編譯器(實驗性)
ruby.options.verbose.level.argument.0.description=詳細模式為“silence”。它會將 $VERBOSE 設定為 nil。
ruby.options.verbose.level.argument.1.description=詳細模式為“medium”。它會將 $VERBOSE 設定為 false。
ruby.options.verbose.level.argument.2.description=(預設)詳細模式為“verbose”。它會將 $VERBOSE 設定為 true。
ruby.options.verbose.level.argument.display.name=級別
ruby.options.verbose.level.description=在指定級別開啟詳細模式而不在開頭列印版本訊息。\n-W2 與 -w 相同。
