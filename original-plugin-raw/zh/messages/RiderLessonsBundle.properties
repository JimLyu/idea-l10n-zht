comment.lesson.name=注释代码行和块
comment.line.uncomment.that.line=使用相同的快捷方式取消注释注释行\: 将文本光标置于该行中的任意位置，然后按 {0}。
comment.line.uncomment.several.lines=要取消对多行的注释，请选择所有注释行，然后按 {0}。
comment.block.comment=若要使用块注释 {0} 进行注释，请选择代码块并按 {1}。
comment.block.uncomment=要取消对块注释的注释，请将文本光标置于注释块中的任意位置，然后按 {0}。
file.structure.lesson.name=文件成员和结构
file.structure.open.popup=大型文件可能很难导航；一个很好的开始方法是查看其成员。按 {0} 可列出所有文件成员。
file.structure.request.prefixes=假设您想找到名称中含有 {0} 和 {1} 单词的方法。输入 {2} (所需单词的前缀)可筛选成员列表。
file.structure.toolwindow=您也可以在专用工具窗口中引用文件结构\: 按 {0} 可将其打开。
file.structure.help.link=文件结构和其他上下文导航命令

basic.completion.lesson.name=代码补全
basic.completion.start.typing=默认情况下，<ide/> 会在您输入时发出补全建议。开始在文本光标所在的位置输入 {0}，您将看到匹配建议。
basic.completion.choose.first=最佳匹配项在补全列表中以蓝色高亮显示\: 按 {0} 将其选中。
basic.completion.activate=如果未自动建议补全，则按 {0} 手动调用。
basic.completion.choose.item=在补全列表中选择 {0} 并按 {1}。
basic.completion.complete=您可以自动插入所有必要的语法元素(圆括号、大括号、分号等)并转到可以开始输入下一条语句的位置。按 {0} 可补全此语句。

rename.press.rename=<strong>重命名</strong>重构会自动更新对重命名符号的所有引用。您可以从声明或该符号的任何用法开始重构。按 {0} 可重命名 <code>Car</code> 类的 {1} 属性。
rename.type.new.name=输入此属性的新名称(例如 {0})，然后按 {1}。
rename.dialog.title=重命名
rename.epilogue=请注意，重构没有触及 <strong>Person</strong> 的 <code>Name</code> 属性。即使在同一上下文中有名称类似的符号，也可以安全使用。

extract.variable.replace.all=所选表达式在示例代码中出现 3 次。选择相应的条目以替换所有这些表达式。
help.refactor.this=“重构此”菜单
extract.variable.choose.type=选择是对新变量使用 ''var'' 还是显式类型，然后按 {0}。
extract.variable.choose.name=指定变量名称或保留建议内容。再次按 {0} 可完成重构。
refactoring.menu.extract.interface=我们选择 {0} 重构，它可以帮助基于当前类的成员快速创建新接口。
refactoring.menu.extract.interface.dialog=指定新接口的名称，并选中应在其中声明的方法旁边的复选框，然后点击<strong>下一步</strong>以完成重构。
refactoring.menu.finish=当文本光标位于成员、变量或字符串文字上时，尝试按 {0} 可查看不同上下文中可用的重构。

alt.enter.remove.parameter=移除形参
alt.enter.invert.condition=反转条件

got.it.balloon.button.text=下一步

## Onboarding
onboarding.module.name=开始
onboarding.module.description=Initial steps of setting up and using the IDE
onboarding.tour.lesson.name=入门导览
rider.onboarding.project.view.description=Click the sidebar icon or press {0} to access your solution files
rider.onboarding.balloon.project.directory=Double-click the solution node, then expand the <strong>Learning</strong> project
rider.onboarding.balloon.open.file=双击以打开 {0}
rider.onboarding.change.ui.settings=For this lesson, Rider changes some UI settings to the defaults. Your preferences will be restored when you complete or exit the lesson.
rider.onboarding.run.configuration.widget=Here you can configure and launch run configurations.  Let''s press {0} or click {1} to start debugging with the current configuration.
rider.onboarding.balloon.open.learn.window=切换到“{0}”工具窗口继续学习本课
rider.onboarding.alt.enter={0} is your number one shortcut in the editor. For example, you can press it to safely remove the {1} parameter.
rider.onboarding.alt.enter.menu=Before applying the {0} fix, consider other useful things that you can do in this popup.
rider.onboarding.search.everywhere=To find anything, press {0} twice or click {1}
rider.onboarding.search.everywhere.query=There are several tabs that limit your search to files, actions, etc. But for now, let''s stay at the <strong>All</strong> tab and type {0}.
rider.onboarding.search.everywhere.result=The query has matched {0} by the initial letters of its compound name. Select it in the list and press {1}.
rider.onboarding.toggle.breakpoint=Let''s debug our program. First, click the line number or press {0} to toggle a breakpoint.
rider.onboarding.debug.window.toolbar=Here you can find all debugging actions. For now, let''s press {0} or click {1} to resume the program and let it run to the end.
rider.onboarding.resume=Press {0} or click {1} to resume the program and let it run to the end
rider.onboarding.settings=One last thing is where to configure everything. Press {0}, or click {1} and choose the corresponding item
rider.onboarding.settings.theme=For example, you can switch between light and dark themes on the {0} | {1} page
rider.onboarding.online.help=在线帮助
rider.onboarding.settings.search=Use the search field to find specific options
rider.onboarding.settings.save=To apply any changes, click {0}
rider.onboarding.finish=That's it for this lesson. Now you can choose <strong>File</strong> | <strong>New Solution</strong> from the main menu to start your own solution, or <strong>File</strong> | <strong>Open</strong> to open an existing one.

## Docker
docker.module.name=Docker
docker.module.description=Get started with Docker in Rider
docker.lesson.name=Docker basics
docker.balloon.right.click.project=Let''s add Docker support to the {0} project. Right-click it and select <strong>Add</strong> | {1}
docker.check.out.dockerfile={0} has generated a Dockerfile with all necessary instructions for your project
docker.click.debug=Press {0} or click {1} to start debugging
docker.open.settings=Before we start, let''s make sure that the Docker daemon is running on your machine. Open settings by pressing {0}, or clicking {1} and choosing the corresponding item
docker.select.run.config=To run your project in a Docker container,  select the Dockerfile run config
docker.run=Press {0} or click this button to run your project in a Docker container