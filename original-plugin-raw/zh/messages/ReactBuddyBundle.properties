JsxTree.action.showHideHooks=显示/隐藏挂钩
JsxTree.collapseAll=全部收起
JsxTree.context.action.wrapIntoCondition=使用条件包装
JsxTree.context.action.wrapIntoConditionTernary=使用条件包装(三元)
JsxTree.dataFlavorNodeName=JSX 树节点
JsxTree.defaultNodeName=Fragment
JsxTree.else=否则
JsxTree.emptyText=找不到 React 组件
JsxTree.expandAll=全部展开
JsxTree.ifMain=if ({0})
JsxTree.loading=正在加载…
JsxTree.popupMenu.label=包装方式\:
JsxTree.removeComponent=移除组件
JsxTree.switchCase=case ({0})
JsxTree.switchDefault=default
JsxTree.switchMain=switch ({0})
Marketplace.action.dialog.description=我们在您的项目中检测到多个具有 React 依赖项的 package.json 文件。\n选择一个以安装 React 库
Marketplace.action.dialog.packageJsonField.label=选择 package.json\:
Marketplace.action.dialog.title=选择源软件包文件
Marketplace.action.dialog.validation=指定源 package.json 文件
Marketplace.action.notification.packageJsonNotFound=在项目中找不到具有 React 依赖项的 package.json
Marketplace.wizard.changeSteps.addCss.description=添加 CSS import
Marketplace.wizard.changesForKit.label=用于安装 {0} 的项目文件中的更改
Marketplace.wizard.createNextJSDocument.description=在 pages 目录下创建文档文件(_D)
Marketplace.wizard.dependenciesToInstall.label=要安装的依赖项\:
Marketplace.wizard.documentation.label=文档
Marketplace.wizard.editNextJSConfig.description=编辑 {0} 文件
Marketplace.wizard.editRootComponent.description=编辑根组件
Marketplace.wizard.install.button=安装(&I)
Marketplace.wizard.next.error.documentAlreadyExists=根据以下文档更新 {0}\:
Marketplace.wizard.next.error.pagesDirectory=在 {0} 中找不到 pages 目录
Marketplace.wizard.noChangesRequired.label=无需进行其他项目更改
Marketplace.wizard.noFileToChange.label=找不到文件
Marketplace.wizard.noKitSelected.label=未选择开发套件
Marketplace.wizard.title=React 库
Palette.action.copyItem.dialog.title=复制调色板条目
Palette.action.copyItem.dialog.variantNameField=变体名称\:
Palette.action.copyItem.validation.empty=指定变体名称
Palette.action.copyItem.validation.unique=指定唯一变体名称
Palette.action.openDoc.label=打开文档
Palette.action.showPreview.label=预览组件
Palette.addSubComponent.intention.label=添加子组件
Palette.addSubComponent.notification.content=将子组件添加到 {0}
Palette.allResult=所有结果
Palette.batch.action.addToPalette.label=将组件添加到调色板
Palette.batch.dialog.componentsLabel=组件
Palette.batch.dialog.paletteLabel=调色板
Palette.batch.dialog.title=调色板编辑器
Palette.batch.editingPalette.importResolve=解析 import…
Palette.batch.editingPalette.resolving=正在解析\: 
Palette.batch.folderField.emptyText=选择一个包含组件的文件夹
Palette.batch.inlay.label=打开调色板编辑器
Palette.batch.loadingComponents=正在项目依赖项中搜索 React 组件
Palette.batch.loadingComponents.indicator.label=找到的组件\:
Palette.batch.paletteTree.action.moveDown.label=下
Palette.batch.paletteTree.action.moveUp.label=运行
Palette.batch.paletteTree.action.remove.label=移除
Palette.batch.selectCategory.dialog.title=选择类别
Palette.componentDragWarning=当索引更新时，无法从面板中拖动。
Palette.componentSearchHistory=COMPONENT_SEARCH_HISTORY
Palette.contextMenu.editTemplate=编辑模板
Palette.contextMenu.navigateToFile=导航到调色板文件
Palette.devtools.error.findFile=找不到文件\: {0}
Palette.devtools.error.rootComponent=找不到应用根组件
Palette.devtools.error.rootFile=应用根组件的文件无效
Palette.devtools.extensionDependency.choosePalette.dialog=添加组件调色板
Palette.devtools.extensionDependency.notification.action.choosePalette=添加
Palette.devtools.extensionDependency.notification.action.openConfigName=打开配置
Palette.devtools.extensionDependency.notification.action.skip=跳过
Palette.devtools.extensionDependency.notificationContent=<html>{0}</html>
Palette.devtools.infoDialog.dependencyInfo=安装以下依赖项\:
Palette.devtools.infoDialog.dependencyInfo.devtoolsContext=添加调色板\:
Palette.devtools.infoDialog.devToolsField.label=工具箱文件目录\:
Palette.devtools.infoDialog.devToolsField.validation=开发工具可能不位于包含索引文件的文件夹中
Palette.devtools.infoDialog.error.devtoolsDirectory=创建 devtools 目录时出错
Palette.devtools.infoDialog.error.devtoolsFiles=创建 devtools 文件时出错
Palette.devtools.infoDialog.error.paletteFileNotFound=在 devtools 目录中找不到调色板文件
Palette.devtools.infoDialog.error.rootComponentFile=编辑根组件时出错
Palette.devtools.infoDialog.hideEditorCheckbox.label=手动注入 <DevSupport>
Palette.devtools.infoDialog.packageJsonField.label=项目的 package.json 文件\:
Palette.devtools.infoDialog.rootComponentFile.error=所选文件不包含根元素
Palette.devtools.infoDialog.rootComponentTree.label=根组件文件\:
Palette.devtools.infoDialog.textInfo=<html>需要附加配置才能使用 React Buddy 的预览和调色板功能。<br/>我们可以帮助自动执行此过程\! 将进行以下更改\:<br/>\\&emsp;1) <b>@React-buddy/ide-toolbox</b> 软件包将被添加到项目的依赖项中；<br/>\\&emsp;2) <b>npm install</b> 将被执行；<br/>\\&emsp;3) 将在工具箱目录中创建包含组件调色板和预览配置的文件；<br/>\\&emsp;4) <b>DevSupport</b> 包装器将被添加到组件树的根(请参阅下面的预览)。</html>
Palette.devtools.infoDialog.title=React Buddy 工具箱配置
Palette.devtools.infoDialog.validation.alreadyContain=指定的文件夹已包含调色板文件
Palette.devtools.infoDialog.validation.noFolder=指定 React Buddy 工具的文件夹
Palette.devtools.infoDialog.validation.rootComponent=<html>使用 <b>ReactDOM.render</b> 指定根组件文件或选择<b>手动注入 DevSupport</b></html>
Palette.intention.addToPalette=添加到 React 调色板
Palette.intention.createNewItemDialog.title=创建新 {0}
Palette.intention.devtoolsNotFound.action.label=配置
Palette.intention.devtoolsNotFound.nextJs.notSupported=组件预览适用于基于 Next.js 10+ 的项目
Palette.intention.devtoolsNotFound.notification.description=在 package.json 中找不到 "@React-buddy/ide-toolbox" 或缺少某些配置文件
Palette.intention.devtoolsNotFound.notification.title=React Buddy 支持
Palette.intention.devtoolsNotFound.packageJson.notFound=找不到 {0} 的 package.json
Palette.intention.devtoolsNotFound.projectType.notSupported=目前，{0} 项目不支持预览
Palette.intention.mainDialog.title=将组件添加到调色板
Palette.intention.mainDialog.validation.alreadyExistsVariant=已存在使用此名称的变体
Palette.intention.mainDialog.validation.emptyCategory=为组件指定类别
Palette.intention.mainDialog.validation.emptyComponent=指定组件
Palette.intention.mainDialog.validation.emptyVariantName=指定变体名称，因为组件已有默认变体
Palette.intention.name.label={0} 名称\:
Palette.intention.requiredProps.notification.description=为避免编译错误，需要填写必填属性
Palette.intention.requiredProps.notification.title=React 调色板
Palette.intention.validation.alreadyExistsComponent=此类{0}已经存在
Palette.intention.validation.emptyComponentName=指定{0}名称
Palette.preview.browser.title=预览
Palette.preview.code.title=代码
Palette.preview.noPreview.label=预览不可用
Palette.preview.noPreview.title=无预览
Preact.action.create.component.arrowFunction.description=创建箭头函数 Preact 组件
Preact.action.create.component.classbased.description=创建基于类的 Preact 组件
Preact.action.create.component.functionDeclaration.description=创建函数声明 Preact 组件
ProxyChecking.notification.text=这可能会导致屏幕和实体设计器出现问题
ProxyChecking.notification.title=代理用于 localhost
React.action.create.component=React 组件
React.action.create.component.arrowFunction.description=创建箭头函数 React 组件
React.action.create.component.arrowFunctionType.name=箭头函数组件
React.action.create.component.classType.name=基于类的组件
React.action.create.component.classbased.description=创建基于类的 React 组件
React.action.create.component.description=创建一个新的 React 组件
React.action.create.component.functionDeclaration.description=创建函数声明 React 组件
React.action.create.component.functionType.name=函数组件
React.action.create.component.title=创建 React 组件
React.action.create.component.validation.capitalized=组件名称必须大写
React.action.create.component.validation.invalidChars=组件名称包含无效字符
React.action.create.component.validation.nullName=指定组件名称
React.action.generateComponent.title=React 调色板中的组件
React.action.generateHook.title=React 挂钩
React.action.showSnippetPreview.label=显示代码段预览
React.appView.rootFileField=根文件\:
React.appView.rootFileField.dialogTitle=选择根文件
React.appView.showRoute.caption=仅显示路由
React.editor.linemarker.handler.caption=组件事件处理程序
React.editor.linemarker.hook.caption=React 挂钩
React.fix.exhaustiveDeps=将依赖项数组更新为\: {0}
React.generation=React Buddy
React.generation.test.afterAll=afterAll
React.generation.test.afterEach=afterEach
React.generation.test.beforeAll=beforeAll
React.generation.test.beforeEach=beforeEach
React.generation.test.dialog.title=创建 React 组件测试
React.generation.test.edit.settings.tooltip=编辑目标设置
React.generation.test.generate.label=生成
React.generation.test.generateStubs.label=为 prop 生成存根
React.generation.test.setting.defaultDirectory.label=默认目录\:
React.generation.test.setting.directory.dialog.title=测试默认目录
React.generation.test.setting.generateInto.label=将测试生成到\:
React.generation.test.setting.subDirectory.label=组件的子目录\:
React.inspection.JSXMap=JSX 映射
React.inspection.canBeConvertedToProp=可以转换为 prop
React.inspection.canBeConvertedToStateOrProp=可以转换为 state 或 prop
React.inspection.canCreateProps=可以创建不存在的 prop
React.inspection.canMapToJSX=可以展开到 JSX
React.inspection.convertToState=转换为 state
React.inspection.convertUnresolvedToState=将 unresolved 转换为 useState
React.inspection.convertVarToState=转换为 useState 变量
React.inspection.createProp=创建 prop
React.inspection.createProps=在 {1} 中创建 {0} prop
React.inspection.createStateVariable=创建 useState 变量 {0}
React.inspection.createTest=创建测试
React.inspection.createTest.validation.alreadyExists=<html>所选目录中已存在 <b>{0}<b/><html/>
React.inspection.createTest.validation.emptyField=目标字段不得为空
React.inspection.dependency.addPaletteExtension=添加组件调色板
React.inspection.dependency.paletteExtensionExist=组件调色板可用
React.inspection.emptyAttribute=空组件特性值
React.inspection.emptyFormActionAttribute=Form action attribute is empty
React.inspection.emptyRefAttribute=ref 特性为空
React.inspection.exhaustiveDeps=需要更新依赖项数组
React.inspection.noParameters=找不到组件形参
React.inspection.noPropsDefinition=找不到组件 prop 定义
React.inspection.nonEditablePropsType=组件属性类型不可编辑
React.inspection.quickFix.emptyEventHandler=生成事件处理程序
React.inspection.quickFix.emptyFormActionAttribute=Generate useActionState
React.inspection.quickFix.emptyRefAttribute=创建 ref
React.inspector.action.addElement=添加元素
React.inspector.action.navigateToSource=导航到源代码
React.inspector.error.calculationError=属性计算错误
React.inspector.error.propertiesNotFound=找不到属性
React.intention.addUseRef=创建 ref
React.intention.generateHandler.label=生成处理程序
React.intention.generateHandler.label.capitalized=生成处理程序
React.intention.wrapIntoCallback.label=使用 useCallback() 包装
React.intention.wrapIntoCondition=使用条件包装
React.intention.wrapIntoConditionTernary=使用条件包装(三元)
React.intention.wrapIntoMemo.label=使用 memo() 包装
React.jsxTree.action.addPaletteComponent.label=从调色板添加组件
React.jsxTree.action.generateHandler.label=生成处理程序
React.livetemplate.context.js.description=创建 React 上下文提供程序
React.livetemplate.context.tsx.description=创建 React 上下文提供程序
React.livetemplate.error.groupNotFound=<html>找不到 React Buddy 模板组。<br/>请将组名称重置为默认值\: <b>{0}</b></html>
React.livetemplate.error.templateNotFound=<html>找不到相应的实时模板。<br/>请将缩写或描述重置为默认值\:<br/>\\&emsp;- 缩写\: \\&quot;{0}\\&quot;;<br/>\\&emsp;- 描述\: \\&quot;{1}\\&quot;.</html>
React.preview.action.visibility.outline=显示/隐藏 JSX Outline
React.preview.action.visibility.preview=显示/隐藏预览
React.preview.errorWhileEditing=编辑 {0} 时出错
React.preview.fillActionName=添加必需 prop
React.preview.notificationContent=要显示组件的预览，您需要填写必需属性
React.preview.notificationTitle=React 预览
React.preview.validation.indexing=索引时预览不可用
React.preview.validation.previewsNotFound=找不到与组件匹配的 Previews.tsx
React.preview.validation.previewsNotFound.title=无法开始预览
React.preview.validation.previewsNotSuitable=<html>开发服务器正在为当前工作区中的另一个项目运行。<br/>请关闭预览服务器并重试。</html>
React.preview.wrongFileType=此类型的文件无法预览
React.previewServer.title=React 预览服务器
React.settings.devServerConfigs.addConfig=添加配置
React.settings.devServerConfigs.label=开发服务器配置
React.settings.devServerConfigs.removeConfig=移除配置
React.settings.devServerConfigs.scriptField.label=脚本\:
React.settings.devServerConfigs.validation.emptyConfigurationParameters=必须填写所有配置参数
React.settings.devServerConfigs.validation.invalidUrl=URL 无效
React.settings.devServerConfigs.validation.noScript=指定运行开发服务器的脚本
React.settings.handlerDeclarationType.arrow=箭头函数
React.settings.handlerDeclarationType.label=事件处理程序生成
React.settings.handlerDeclarationType.regular=函数声明
React.settings.previewVisibilityLabel=显示编辑器浮动面板
React.settings.saveOutlineStateAcrossEditors=保存所有文件的 JSX Outline 状态
React.settings.subCompNotification.label=显示子组件通知
React.settings.vcsNotification.addToVcs=添加到 VCS
React.settings.vcsNotification.description=rcb-settings.xml 位于版本控制系统中忽略的文件列表中
React.settings.vcsNotification.ignore=忽略
React.settings.vcsNotification.title=React Buddy 设置
React.settings.wrapIntoUseCallback=使用 useCallback() 包装生成的处理程序
React.toolwindow.start.typing.for.search=开始输入以进行搜索
React.visualDesigner.componentPropsCaption=组件属性
React.visualDesigner.copyUrl=复制 URL
React.visualDesigner.highlightModeCaption=高亮显示元素
React.visualDesigner.highlightModeDescription=选择一个元素以跳转到源码
React.visualDesigner.previewSettings.configureComponent=配置组件
React.visualDesigner.previewSettings.zoomIn=放大
React.visualDesigner.previewSettings.zoomOut=缩小
React.visualDesigner.previewSettings.zoomReset=重置缩放
React.visualDesigner.previewSettingsCaption=预览设置
React.visualDesigner.refresh=刷新
React.visualDesigner.reinit=重新初始化
React.visualDesigner.reinit.description=重新创建预览浏览器实例
React.visualDesigner.reload=重新加载
React.visualDesigner.reload.description=重新加载页面
React.visualDesigner.traceUpdates=高亮显示组件呈现
React.visualDesigner.traceUpdatesDescription=激活荧光笔，在 React 组件重新呈现时为其边界着色
React.visualDesigner.waitingForServer.instruction=<html><p>我们将自动确定您的服务器的 URL 或使用服务器设置中指定的值。如果确定不正确，请手动更改 URL。</p></html>
React.visualDesigner.waitingForServer.label=正在等待
React.visualDesigner.waitingForServer.rcblabel=正在等待服务器…
React.visualDesigner.waitingForServer.urlFieldLabel=开发服务器 URL\:
ReactAdmin.inspection.unresolved.resource=没有相应的资源
Settings.displayName.devServer=开发服务器配置
Settings.displayName.editor=编辑器设置
Settings.displayName.storybook=Storybook
Settings.displayName.testGeneration=测试生成
Snippet.dialog.title=代码段形参
Snippet.param.wizard.asSeparateComponent=作为单独的组件插入
Snippet.param.wizard.bar.title=条形图设计器
Snippet.param.wizard.cardList.title=卡片列表设计器
Snippet.param.wizard.cardObject.title=卡片对象设计器
Snippet.param.wizard.componentParameters.label=组件形参
Snippet.param.wizard.dialog.title=对话框设计器
Snippet.param.wizard.finalButton=完成(&F)
Snippet.param.wizard.form.title=表单设计器
Snippet.param.wizard.line.title=折线图设计器
Snippet.param.wizard.parameters.label=形参
Snippet.param.wizard.pie.title=饼图设计器
Snippet.param.wizard.preview.hide=隐藏预览
Snippet.param.wizard.preview.show=显示预览
Snippet.param.wizard.scatter.title=散点图设计器
Snippet.param.wizard.table.title=表设计器
Snippet.param.wizard.title=代码段形参编辑器
Snippet.param.wizard.treeTable.title=树形表设计器
Snippet.param.wizard.validation.arrayVariable=指定数组变量
Snippet.param.wizard.validation.collectionIsEmpty=指定 {0} 条目
Snippet.param.wizard.validation.objectName=指定对象名称
Snippet.param.wizard.validation.variable=指定变量
Snippet.validation.notBoolean=为 {0} 指定的值不是布尔值
Snippet.validation.notCompatibleType=为 {0} 指定的值的类型不兼容
Snippet.validation.notNumber=为 {0} 指定的值不是数字
Snippet.validation.specifyValue=指定 {0} 的值
Snippet.velocity.charts.axisLabel=轴标签
Snippet.velocity.charts.bottomAxis=底轴\:
Snippet.velocity.charts.data=数据属性\:
Snippet.velocity.charts.id=ID 属性\:
Snippet.velocity.charts.index=索引属性\:
Snippet.velocity.charts.key=键属性\:
Snippet.velocity.charts.label=标签属性\:
Snippet.velocity.charts.leftAxis=左轴\:
Snippet.velocity.charts.rightAxis=右轴\:
Snippet.velocity.charts.topAxis=顶轴\:
Snippet.velocity.charts.validation.emptyData=指定数据属性
Snippet.velocity.charts.validation.emptyId=指定 ID 属性
Snippet.velocity.charts.validation.emptyIndex=指定索引属性
Snippet.velocity.charts.validation.emptyKeys=必须至少选择一个键属性
Snippet.velocity.charts.validation.emptyLabel=指定标签属性
Snippet.velocity.charts.validation.emptyValue=指定值属性
Snippet.velocity.charts.validation.emptyX=指定 x 属性
Snippet.velocity.charts.validation.emptyY=指定 y 属性
Snippet.velocity.charts.value=值属性\:
Snippet.velocity.charts.x=x\:
Snippet.velocity.charts.y=y\:
Snippet.velocity.param.card.field.filterBy=筛选依据\:
Snippet.velocity.param.card.field.labelPosition=标签位置\:
Snippet.velocity.param.card.field.outline=带轮廓
Snippet.velocity.param.card.field.pagination=分页
Snippet.velocity.param.card.field.rowsPerPage=每页行数\:
Snippet.velocity.param.card.field.solid=实心
Snippet.velocity.param.card.field.sortBy=排序依据\:
Snippet.velocity.param.card.field.subTitleProperty=副标题属性\:
Snippet.velocity.param.card.field.table=要显示的属性
Snippet.velocity.param.card.field.table.validation=卡片项属性名称不得为空
Snippet.velocity.param.card.field.titleProperty=标题属性\:
Snippet.velocity.param.card.itemField.placeholder=按 Ctrl + 空格键查看选项
Snippet.velocity.param.card.key.label=键属性\:
Snippet.velocity.param.card.object.type=卡片对象类型\:
Snippet.velocity.param.card.select.variable=局部变量\:
Snippet.velocity.param.cardList.actions.label=卡片列表操作
Snippet.velocity.param.cardObject.actions.label=卡片操作\:
Snippet.velocity.param.dataSource.type=数据源\:
Snippet.velocity.param.dialog.actions.label=对话框操作
Snippet.velocity.param.dialog.content.label=内容\:
Snippet.velocity.param.dialog.fullScreen.label=全屏
Snippet.velocity.param.dialog.fullWidth.label=全宽
Snippet.velocity.param.dialog.maxWidth.label=最大宽度\:
Snippet.velocity.param.dialog.position.label=位置\:
Snippet.velocity.param.dialog.title.label=标题\:
Snippet.velocity.param.form.action.actionType=按类型分组
Snippet.velocity.param.form.action.formSubmit=提交表单
Snippet.velocity.param.form.action.id=ID
Snippet.velocity.param.form.action.label=标签
Snippet.velocity.param.form.action.table.validation=操作表字段不得为空
Snippet.velocity.param.form.actions.table=表单操作
Snippet.velocity.param.form.field.actionType=按类型分组
Snippet.velocity.param.form.field.controlType=控制类型
Snippet.velocity.param.form.field.dataType=数据类型
Snippet.velocity.param.form.field.description=描述
Snippet.velocity.param.form.field.editor.title=表单类型字段编辑器
Snippet.velocity.param.form.field.helperText=帮助程序文本
Snippet.velocity.param.form.field.label=标签
Snippet.velocity.param.form.field.labelPosition=标签位置\:
Snippet.velocity.param.form.field.name=名称
Snippet.velocity.param.form.field.placeholder=占位符
Snippet.velocity.param.form.field.required=必要
Snippet.velocity.param.form.field.table=表单字段
Snippet.velocity.param.form.field.table.validation=表单字段名称不得为空
Snippet.velocity.param.form.field.validate=验证
Snippet.velocity.param.form.loading.type=正在加载…
Snippet.velocity.param.form.new.type.name=新类型名称\:
Snippet.velocity.param.form.object.type=表单对象类型\:
Snippet.velocity.param.form.select.type=对象类型\:
Snippet.velocity.param.preview.compilation.error=Velocity 模板编译错误。\n最有可能的是，您需要对原型代码进行更改。
Snippet.velocity.param.table.actions.label=表操作
Snippet.velocity.param.table.column.sorting=排序
Snippet.velocity.param.table.column.table=表列属性
Snippet.velocity.param.table.column.title=标题
Snippet.velocity.param.table.column.validation=表列名不得为空
Snippet.velocity.param.table.columns.label=表列
Snippet.velocity.param.table.expandIfSet=如果已设置以下属性则展开\:
Snippet.velocity.param.table.expandableRow=可展开行
Snippet.velocity.param.table.expandableRow.validation=<html>为<b>如果已设置属性则展开</b>和<b>要显示的属性</b>至少指定一个值</html>
Snippet.velocity.param.table.fixedColumn=固定列\:
Snippet.velocity.param.table.fixedHeader=固定标题
Snippet.velocity.param.table.hierarchical=分层属性\:
Snippet.velocity.param.table.object.type=表对象类型\:
Snippet.velocity.param.table.propsToDisplay=要显示的属性\:
Snippet.velocity.param.table.rowSize=行大小\:
Snippet.velocity.param.table.stripes=条纹
Storybook.action.createNewStory.description=创建一个新故事
Storybook.action.createNewStory.dialog.title=新建 Storybook .stories 文件
Storybook.action.createNewStory.label=Storybook 故事
Storybook.action.generateStory=Storybook 中的组件
Storybook.componentDragWarning=索引更新时无法拖动。
Storybook.contextMenu.navigate=导航到故事
Storybook.intention.createStory.allProps.label=为所有 prop
Storybook.intention.createStory.category.label=类别\:
Storybook.intention.createStory.category.validation=指定故事的类别
Storybook.intention.createStory.dialog.title=创建故事
Storybook.intention.createStory.directory.label=目标\:
Storybook.intention.createStory.generateArgs.actionLink=默认实参
Storybook.intention.createStory.generateArgs.label=生成
Storybook.intention.createStory.requiredProps.label=仅为必需 prop
Storybook.intention.createStory.title=添加到 Storybook
Storybook.intention.createStory.validation.directoryDoesNotExists=Storybook 默认目录不存在
Storybook.intention.createStory.validation.storyAlreadyExists=故事已经存在
Storybook.livetemplate.newStory.js.7plus.description=Storybook v7 故事
Storybook.livetemplate.newStory.js.description=Storybook v6 故事
Storybook.livetemplate.newStory.tsx.7plus.description=Storybook v7 故事
Storybook.livetemplate.newStory.tsx.description=Storybook v6 故事
Storybook.setting.defaultDirectory.label=默认目录\:
Storybook.setting.directory.dialog.title=Storybook 默认目录
Storybook.setting.generateInto.label=将故事生成到\:
Storybook.setting.subDirectory.label=组件的子目录\:
Storybook.setting.use7plus.label=使用 CSF 7+
Storybook.toolwindow.stripe=Storybook
action.com.intellij.reactbuddy.GenerateReactComponentAction.description=生成 React 组件
action.com.intellij.reactbuddy.GenerateReactComponentAction.text=React 组件
action.com.intellij.reactbuddy.InstallReactLibraryAction.description=打开 React Buddy 对话框以安装 React 库
action.com.intellij.reactbuddy.InstallReactLibraryAction.text=安装 React 库
action.com.intellij.reactbuddy.OutlineVisibleAction.description=在当前编辑器中显示/隐藏大纲
action.com.intellij.reactbuddy.PreviewVisibleAction.description=在当前编辑器中显示/隐藏预览
action.com.intellij.reactbuddy.ShowInComponentTreeAction.text=显示组件树
action.com.intellij.reactbuddy.action.hook.GenerateReactHookAction.description=生成 React 挂钩
action.com.intellij.reactbuddy.action.hook.GenerateReactHookAction.text=React 挂钩
action.com.intellij.reactbuddy.action.storybook.GenerateStoryAction.description=生成 Storybook 组件
action.com.intellij.reactbuddy.action.storybook.GenerateStoryAction.text=Storybook 中的组件
configurable.group.com.intellij.reactbuddy.tools.settings.description=<html><body>React Buddy 通过提供围绕 JSX 的可视化工具来帮助开发基于 React.js 的应用程序。
configurable.group.com.intellij.reactbuddy.tools.settings.display.name=React Buddy
error.reporter.privacy.notice.text=<html>我同意 React Buddy 开发团队将使用<b>硬件配置</b>(操作系统名称、PC 内存、PC 主机名)、<b>软件配置</b>(IDEA 版本、Java 运行时版本、IDEA 名称)、<b>产品信息</b>(插件版本、上次调用的操作)以及上面显示的<b>错误详细信息</b>来<b>改进</b>其产品。<b>请确保堆栈跟踪不包含任何敏感信息</b>。此外，如果您能够通过<a href\="https\://react-buddy.com/contacts/">电子邮件</a>或 <a href\="https\://discord.gg/dgcrTKFUb8">Discord 频道</a>分享重现案例，React Buddy 团队将不胜感激。</html>
form.field.rule.editor.numberRestriction=字符数
form.field.rule.editor.title=添加验证规则
form.field.rule.intention.title=添加验证规则
inspection.group.key.rcbCommon=React Buddy
react.buddy.addsubcomponent.notifications=React Buddy 添加子组件
react.buddy.common.notifications=React Buddy 常见通知
react.buddy.logs=React Buddy 日志
react.componentRegister.command.name=React Buddy 注册组件
toolwindow.stripe.reactInspector=React 检查器
toolwindow.stripe.reactPalette=React 调色板
