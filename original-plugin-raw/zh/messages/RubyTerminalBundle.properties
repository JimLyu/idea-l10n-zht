bundle.subcommands.cache.description=将所需的 .gem 文件打包到您的应用程序中
bundle.subcommands.config.description=设置 Bundler 配置选项
bundle.subcommands.help.description=显示每个子命令的详细帮助
bundle.subcommands.install.description=安装 Gemfile 或 Gemfile.lock 指定的 gem
bundle.subcommands.install.trust.policy.argument.display.name=策略
bundle.subcommands.install.trust.policy.description=应用 RubyGems 安全策略 <{0}>
bundle.subcommands.plugin.description=管理 Bundler 插件
bundle.subcommands.plugin.subcommands.help.description=描述多个子命令或一个特定的子命令
bundle.subcommands.plugin.subcommands.install.description=从提供的 RubyGems 源(使用 --source 选项)、从提供的 git 源(使用 --git)或从提供的本地路径(使用 --path)安装插件。如果没有提供源，则使用 Gem.sources
bundle.subcommands.plugin.subcommands.install.options.branch.description=要签出的 git 分支
bundle.subcommands.plugin.subcommands.install.options.git.description=要从中提取的 git 仓库的 URL
bundle.subcommands.plugin.subcommands.install.options.local.git.description=要从中提取的本地 git 仓库的路径(已弃用)
bundle.subcommands.plugin.subcommands.install.options.path.description=要直接使用的本地 gem 的路径
bundle.subcommands.plugin.subcommands.install.options.ref.description=要签出的 git 修订
bundle.subcommands.plugin.subcommands.install.options.source.description=要从中提取插件的 RubyGems 源的 URL
bundle.subcommands.plugin.subcommands.install.options.version.description=要提取的插件的版本
bundle.subcommands.plugin.subcommands.list.description=列出已安装的插件和可用命令
bundle.subcommands.plugin.subcommands.uninstall.description=卸载给定插件列表。要卸载所有插件，请使用 -all 选项。
bundle.subcommands.plugin.subcommands.uninstall.options.all.description=卸载所有已安装的插件。如果没有安装插件，则不执行任何操作。
bundle.subcommands.remove.argument.display.name=gem
bundle.subcommands.remove.description=从 Gemfile 中移除 gem
bundle.subcommands.remove.options.install.description=从 Gemfile 中移除给定gem 后，运行 bundle install，这可以确保锁定文件和磁盘上安装的 gem 也得到更新，以移除给定 gem
bundle.subcommands.version.description=打印 Bundler 版本信息
irb.options.backtrace.limit.description=显示回溯前 n 行和后 n 行
irb.options.encoding.argument.display.name=ex[\:in]
irb.options.encoding.description=设置默认的外部(ex)和内部(in)编码(与 'ruby -E' 相同)
irb.options.help.description=打印帮助
irb.options.prompt.argument.display.name=prompt-mode
irb.options.prompt.description=设置提示模式。预定义的提示模式为\: 'default'、'classic'、'simple'、'inf-ruby'、'xmp'、'null'。
irb.options.simple.prompt.description=将提示模式设置为 'simple'
irb.options.version.description=打印 irb 的版本
irb.options.warning.level.argument.display.name=级别
irb.options.warning.level.description=设置警告级别\: 0\=免打扰，1\=中等，2\=详细(与 'ruby -W' 相同)
rails.options.help.description=显示帮助消息并退出
rails.options.version.description=显示 Rails 版本号并退出
rails.subcommands.console.description=从命令行与您的 Rails 应用程序交互
rails.subcommands.console.options.environment.description=指定运行此控制台的环境(测试/开发/生产)
rails.subcommands.console.options.sandbox.description=退出时回滚数据库修改
rails.subcommands.dbconsole.description=为 config/database.yml 中指定的数据库启动控制台
rails.subcommands.dbconsole.options.database.description=指定要使用的数据库
rails.subcommands.dbconsole.options.environment.description=运行 `dbconsole` 的环境(例如，测试/开发/生产)
rails.subcommands.dbconsole.options.mode.description=自动将 sqlite3 数据库置于指定模式
rails.subcommands.dbconsole.options.password.description=自动提供来自 database.yml 的密码
rails.subcommands.generate.description=用法\: rails generate GENERATOR [args] [options]
rails.subcommands.generate.options.force.description=覆盖已存在的文件
rails.subcommands.generate.options.help.description=打印生成器的选项和用法
rails.subcommands.generate.options.pretend.description=运行但不进行任何更改
rails.subcommands.generate.options.quiet.description=禁止状态输出
rails.subcommands.generate.options.skip.description=跳过已存在的文件
rails.subcommands.new.argument.path.display.name=路径
rails.subcommands.new.description=创建一个新的 Rails 应用程序
rails.subcommands.routes.description=列出您的应用程序中定义的所有路由
rails.subcommands.routes.options.controller.description=按特定控制器筛选，例如 PostsController 或 Admin\:\:PostsController
rails.subcommands.routes.options.expanded.description=垂直打印展开的路由并附带各部分的说明
rails.subcommands.routes.options.grep.description=按特定模式对路由执行 grep 命令
rails.subcommands.server.description=启动 Web 服务器以通过浏览器访问您的应用程序
rails.subcommands.server.options.binding.description=将 Rails 绑定到指定的 IP - 在开发中默认为 'localhost'，在其他环境中默认为 '0.0.0.0'
rails.subcommands.server.options.config.description=使用自定义 rackup 配置。默认值\: config.ru。
rails.subcommands.server.options.daemon.description=将服务器作为守护进程运行
rails.subcommands.server.options.dev.caching.description=指定开发中是否执行缓存
rails.subcommands.server.options.early.hints.description=启用 HTTP/2 早期提示
rails.subcommands.server.options.environment.description=指定运行此服务器的环境(例如，测试/开发/生产)
rails.subcommands.server.options.log.to.stdout.description=是否记录到 stdout。在开发过程中，未启用守护进程时默认启用。
rails.subcommands.server.options.pid.description=指定 PID 文件 - 默认为 tmp/pids/server.pid
rails.subcommands.server.options.port.description=在指定端口上运行 Rails - 默认为 3000
rails.subcommands.server.options.using.description=指定用于运行应用程序的 Rack 服务器(thin/puma/webrick)
rails.subcommands.test.argument.display.name=文件或目录
rails.subcommands.test.description=运行测试套件
rbenv.subcommands.install.options.force.description=允许覆盖现有的已安装版本
rbenv.subcommands.install.options.keep.description=安装后将源树保留在 RBENV_BUILD_ROOT 中(默认为“RBENV_ROOT/sources”)
rbenv.subcommands.install.options.list.all.description=列出所有本地版本，包括过时的版本
rbenv.subcommands.install.options.list.description=列出每个 Ruby 的最新稳定版本
rbenv.subcommands.install.options.patch.description=在构建之前应用来自 stdin 的补丁
rbenv.subcommands.install.options.skip.existing.description=避免覆盖现有的已安装版本
rbenv.subcommands.install.options.verbose.description=详细模式\: 将所有构建输出转发到 stdout/stderr
rbs.options.collection.description=收集配置的文件路径(默认值\: rbs_collection.yaml)
rbs.options.dir.description=从目录加载 RBS 文件
rbs.options.library.description=加载库的 RBS 文件
rbs.options.log.level.description=指定日志级别(默认为 `warn`)
rbs.options.log.output.description=指定要输出日志的文件(默认为 stderr)
rbs.options.no.collection.description=忽略收集配置
rbs.options.no.stdlib.description=跳过加载标准库签名
rbs.options.repo.description=添加 RBS 仓库
rbs.subcommands.ancestors.description=显示给定类或模块的上级
rbs.subcommands.ancestors.options.instance.description=给定 type_name 的实例的上级(默认)
rbs.subcommands.ancestors.options.singleton.description=给定 type_name 的单例的上级
rbs.subcommands.annotate.description=从 RDoc 导入文档并更新 RBS 文件
rbs.subcommands.annotate.options.arglists.description=生成实参列表部分(默认为 true)
rbs.subcommands.annotate.options.dir.description=从 DIRNAME 加载 RDoc
rbs.subcommands.annotate.options.filename.description=在文档中包含源文件名(默认为 true)
rbs.subcommands.annotate.options.gems.description=从 gem 加载 RDoc (默认为 false)
rbs.subcommands.annotate.options.home.description=从主目录加载 RDoc (默认为 false)
rbs.subcommands.annotate.options.site.description=从站点目录加载 RDoc (默认为 false)
rbs.subcommands.annotate.options.system.description=从系统加载 RDoc (默认为 true)
rbs.subcommands.ast.description=打印已加载环境的 JSON AST
rbs.subcommands.collection.description=管理 RBS 集合，其中包含第三方 RBS
rbs.subcommands.constant.description=基于 RBS 解析常量
rbs.subcommands.constant.options.context.description=常量解析开始的模块的名称
rbs.subcommands.list.description=列出类、模块和接口
rbs.subcommands.list.options.class.description=列出类
rbs.subcommands.list.options.interface.description=列出接口
rbs.subcommands.list.options.module.description=列出模块
rbs.subcommands.method.description=显示由 type_name 和 method_name 指定的方法的信息
rbs.subcommands.method.options.instance.description=显示实例方法(默认)
rbs.subcommands.method.options.singleton.description=显示单例方法
rbs.subcommands.methods.description=显示类或模块中定义的方法
rbs.subcommands.methods.options.inherit.description=同时显示在超类与混合模块中定义的方法
rbs.subcommands.methods.options.instance.description=显示实例方法(默认)
rbs.subcommands.methods.options.singleton.description=显示单例方法
rbs.subcommands.parse.description=解析给定 RBS 文件并打印任何语法错误
rbs.subcommands.paths.description=显示从中加载 RBS 文件的目录路径
rbs.subcommands.prototype.description=生成 RBS 文件原型。支持的生成器包括 rb、rbi、runtime。
rbs.subcommands.test.options.double.suite.description=设置正在使用的双重套件(当前支持\: rspec | minitest)
rbs.subcommands.test.options.sample.size.description=设置示例大小
rbs.subcommands.test.options.target.description=设置运行时测试目标
rbs.subcommands.test.options.unchecked.class.description=设置不会被检查的类
rbs.subcommands.validate.description=验证 RBS 文件。这样可以确保 RBS 文件中存在类型名称并且类型应用程序具有正确的实参数量。
rbs.subcommands.vendor.description=项目目录中的供应商签名。此命令会忽略 RBS 加载全局选项 `-r` 和 `-I`。
rbs.subcommands.vendor.options.clean.description=清理供应商目录(默认值\: no)
rbs.subcommands.vendor.options.vendor.dir.description=指定供应商签名的目录(默认值\: vendor/sigs)
rspec.options.bisect.description=反复运行该套件，以便将故障隔离到最小的可重现案例
rspec.options.force.color.description=强制输出为彩色，即使输出不是 TTY
rspec.options.format.argument.documentation.description=组和示例名称
rspec.options.format.argument.failures.description=“file\:line\:reason”，适用于编辑器集成
rspec.options.format.argument.progress.description=默认 - 点
rspec.options.format.description=选择格式化程序
rspec.options.help.description=显示帮助消息
rspec.options.no.color.description=强制输出为非彩色，即使输出是 TTY
rspec.options.order.argument.defined.description=示例和组按其定义的顺序运行
rspec.options.order.argument.rand.description=随机化组和示例的顺序。您可以指定种子，例如 --order random\:123。
rspec.options.order.argument.random.description=rand 的别名
rspec.options.order.argument.recently.modified.description=首先运行最近修改的文件
rspec.options.order.description=按指定的顺序类型运行示例
rspec.options.path.description=指定要添加到 $LOAD_PATH 的 PATH (可以多次使用)
rspec.options.pattern.description=加载与模式匹配的文件(默认值\:“spec/**/*_spec.rb”)
rspec.options.tag.description=运行带有指定标签的示例，或者在标签前添加 ~ 来排除示例
ruby.options.backtrace.limit.argument.display.name=数量
ruby.options.backtrace.limit.description=限制回溯的最大长度
ruby.options.dump.argument.display.name=目标
ruby.options.dump.argument.help.description=显示长帮助消息(与 --help 相同)
ruby.options.dump.argument.insns.description=打印反汇编的字节码指令列表
ruby.options.dump.argument.insns_without_opt.description=在应用各种优化之前打印反汇编的字节码指令列表
ruby.options.dump.argument.parsetree.description=打印程序的 Ruby AST 文本表示
ruby.options.dump.argument.parsetree_with_comment.description=打印程序的 Ruby AST 文本表示，但每个节点都带有相关的 Ruby 源代码注解
ruby.options.dump.argument.syntax.description=检查语法(与 -c --yydebug 相同)
ruby.options.dump.argument.usage.description=打印简短的用法消息(与 -h 相同)
ruby.options.dump.argument.version.description=打印版本描述(与 --version 相同)
ruby.options.dump.argument.yydebug.description=启用编译器调试模式(与 --yydebug 相同)
ruby.options.dump.description=转储一些信息
ruby.options.encoding.argument.display.name=external[\:internal]
ruby.options.encoding.description=指定外部编码和内部编码的默认值。\n值应以冒号(\:)分隔。
ruby.options.external.internal.encoding.argument.display.name=编码
ruby.options.external.internal.encoding.description=指定默认的外部或内部字符编码
ruby.options.features.argument.description=启用或禁用 {0}
ruby.options.features.argument.did.you.mean.description=did_you_mean (默认值\: 启用)
ruby.options.features.argument.display.name=功能
ruby.options.features.argument.error.highlight.description=error_highlight (默认值\: 启用)
ruby.options.features.argument.frozen.string.literal.description=冻结所有字符串字面量(默认值\: 禁用)
ruby.options.features.argument.gems.description=rubygems (仅用于调试，默认值\: 启用)
ruby.options.features.argument.mjit.description=基于 C 编译器的 JIT 编译器(默认值\: 禁用)
ruby.options.features.argument.rubyopt.description=RUBYOPT 环境变量(默认值\: 启用)
ruby.options.features.argument.yjit.description=进程内 JIT 编译器(默认值\: 禁用)
ruby.options.features.description=启用或禁用功能
ruby.options.jit.description=启用进程内 JIT 编译器(实验性)
ruby.options.mjit.description=启用基于 C 编译器的 JIT 编译器(实验性)
ruby.options.verbose.level.argument.0.description=详细模式为“silence”。它会将 $VERBOSE 设置为 nil。
ruby.options.verbose.level.argument.1.description=详细模式为“medium”。它会将 $VERBOSE 设置为 false。
ruby.options.verbose.level.argument.2.description=(默认)详细模式为“verbose”。它会将 $VERBOSE 设置为 true。
ruby.options.verbose.level.argument.display.name=级别
ruby.options.verbose.level.description=在指定级别打开详细模式而不在开头打印版本消息。\n-W2 与 -w 相同。
