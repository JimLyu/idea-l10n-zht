DumpSpringMVCModelAction.gathering.spring.mvc.models=正在收集 Spring MVC 模型…
DumpSpringMVCModelAction.scanning.spring.mvc.models=正在扫描 Spring MVC 模型…
SpringMVCInitBinderInspection.method.annotated.with.initbinder.must.return.void=使用 @InitBinder 注解的方法必须返回 void
SpringMvcRequestMappingRelatedItemLineMarkerProvider.related.views=相关视图
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.caption=<html><body><b>{0}</b> 的视图(目前找到 {1} 个)</body></html>
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.finished.caption=<html><body><b>{0}</b> 的视图(找到 {1} 个)</body></html>
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.title=正在搜索请求映射 {0}
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.title=请求映射 {0}
SpringMvcRequestMappingRelatedItemLineMarkerProvider.spring.view=Spring 视图
SpringMvcView.designer.properties.show.javadoc=显示文档
SpringMvcView.request.method=请求方法
SpringMvcVtlGlobalVariableProvider.model.attribute=模型特性
ViewReference.cannot.resolve.mvc.view=无法解析 MVC 视图 ''{0}''
ViewReference.no.view.resolvers.found=未找到视图解析器
action.DumpSpringMVCModel.text=转储 Spring MVC 模型
action.DumpSpringModulesSorter.text=已排序的转储 URL 模块
action.ExceptionHandlerTemplateGenerateAction.description=生成异常处理程序
action.ExceptionHandlerTemplateGenerateAction.text=异常处理程序
action.GenerateSpringEndpointAction.description=生成请求映射方法
action.GenerateSpringEndpointAction.text=请求映射…
action.Spring.Create.Endpoint.dialog.title=新建请求映射
action.Spring.Create.Endpoint.text.empty=/路径
action.export.openapi.draft=生成 OpenAPI 草稿
cannot.resolve.controller.url=无法解析控制器 URL ''{0}''
cors.mapping.method.unresolved.message=无效方法 ''{0}''
documentation.provider.consumes=消耗
documentation.provider.headers=标头
documentation.provider.methods=方法
documentation.provider.model.attributes=模型特性
documentation.provider.params=形参
documentation.provider.path.variables=路径变量
documentation.provider.produces=生成
live.template.controller.description=Spring '@Controller' 模板
live.template.delete.mapping.description=Spring MVC '@DeleteMapping' 模板
live.template.exceptionHandler.description=Spring `@ExceptionHandler` 模板
live.template.get.mapping.description=Spring MVC '@GetMapping' 模板
live.template.patch.mapping.description=Spring MVC '@PatchMapping' 模板
live.template.post.mapping.description=Spring MVC '@PostMapping' 模板
live.template.put.mapping.description=Spring MVC '@PutMapping' 模板
live.template.request.mapping.description=Spring MVC '@RequestMapping' 模板
logical.spring.controller.endpoints=端点
logical.spring.controller.mapping.views=视图
logical.spring.functional.endpoints=端点
method.name.delete=Delete
method.name.get=Get
method.name.patch=Patch
method.name.post=Post
method.name.put=Put
method.name.request=Request
mvc.application.context.autodetected=MVC 应用程序上下文
mvc.controller=控制器
mvc.framework.name=Spring MVC
mvc.goto.related.item.group.name=Spring MVC
mvc.initializer.context.autodetected=MVC {0} 初始值设定项 servlet 上下文
mvc.inspection.group.name=Spring MVC
mvc.inspection.init.binder=非 void @InitBinder 方法
mvc.inspection.path.variable=@PathVariable 声明和用法不匹配
mvc.inspection.view.reference=未解析的视图引用
mvc.servlet.context.autodetected=MVC {0} servlet 上下文
mvc.tab.title=MVC
progress.creating.endpoint=正在创建请求映射
request.mapping.gutter.name=请求映射
request.mapping.gutter.open.in.http.name=在 HTTP 客户端中打开
request.mapping.gutter.views.name=导航到相关视图
resource.location.unresolved.message=无法解析位置 ''{0}''
spring.component.template.controller=控制器
spring.component.template.controllerAdvice=控制器建议
spring.component.template.restController=REST 控制器
spring.controller.request.param.help.authenticatedPrincipal=用于将 Authentication.getPrincipal() 解析为方法实参的注解。
spring.controller.request.param.help.bindingResult=用于访问命令对象(即 @ModelAttribute 实参)的验证和数据绑定错误，或 @RequestBody 或 @RequestPart 实参验证的错误。必须紧跟在已验证的方法实参之后声明 Errors 或 BindingResult 实参。
spring.controller.request.param.help.csrfToken=提供有关预期 CSRF 令牌的信息。
spring.controller.request.param.help.errors=用于访问命令对象(即 @ModelAttribute 实参)的验证和数据绑定错误，或 @RequestBody 或 @RequestPart 实参验证的错误。必须紧跟在已验证的方法实参之后声明 Errors 或 BindingResult 实参。
spring.controller.request.param.help.httpEntity=用于访问请求标头和正文。正文使用 HttpMessageConverter 进行转换。
spring.controller.request.param.help.httpMethod=请求的 HTTP 方法。
spring.controller.request.param.help.httpSession=强制会话的存在。因此，此类实参永远不会为 null。请注意，会话访问并非线程安全。
spring.controller.request.param.help.inputStream=用于访问由 Servlet API 公开的原始请求正文。
spring.controller.request.param.help.locale=当前请求区域设置，由最具体的可用 LocaleResolver (实际上是配置的 LocaleResolver 或 LocaleContextResolver)确定。
spring.controller.request.param.help.map=用于访问 HTML 控制器中使用的模型，并作为视图呈现的一部分公开给模板。
spring.controller.request.param.help.model=用于访问 HTML 控制器中使用的模型，并作为视图呈现的一部分公开给模板。
spring.controller.request.param.help.modelMap=用于访问 HTML 控制器中使用的模型，并作为视图呈现的一部分公开给模板。
spring.controller.request.param.help.nativeWebRequest=对请求形参、请求特性和会话特性的通用访问，无需直接使用 Servlet API。
spring.controller.request.param.help.oAuth2AuthorizedClient=此接口的实现负责授权客户端的整体管理。
spring.controller.request.param.help.outputStream=用于访问由 Servlet API 公开的原始响应正文。
spring.controller.request.param.help.pagination=保留分页信息的对象。
spring.controller.request.param.help.principal=当前经过身份验证的用户，可能是特定的 Principal 实现类(如果已知)。请注意，如果注解了此实参，则其不会立即解析，以便允许自定义解析器在通过 HttpServletRequest\#getUserPrincipal 回退到默认解析之前对其进行解析。例如，Spring Security 身份验证实现了 Principal，并将通过 HttpServletRequest\#getUserPrincipal 注入，除非它也用 @AuthenticationPrincipal 注解，在这种情况下，它将由自定义 Spring Security 解析器通过 Authentication\#getPrincipal 进行解析。
spring.controller.request.param.help.pushBuilder=用于编程式 HTTP/2 资源推送的 Servlet 4.0 推送构建器 API。请注意，根据 Servlet 规范，如果客户端不支持该 HTTP/2 功能，则注入的 PushBuilder 实例可以为 null。
spring.controller.request.param.help.reader=用于访问由 Servlet API 公开的原始请求正文。
spring.controller.request.param.help.redirectAttributes=指定在重定向的情况下要使用的特性(即追加到查询字符串)以及在重定向后的请求之前临时存储的闪存特性。
spring.controller.request.param.help.servletRequest=对 servlet 请求的通用访问
spring.controller.request.param.help.servletResponse=对 servlet 响应的通用访问
spring.controller.request.param.help.sessionStatus=用于将表单处理标记为已完成，这将触发通过类级别 @SessionAttributes 注解声明的会话特性的清理。
spring.controller.request.param.help.sort=查询的排序选项。您必须至少提供一个要排序的属性列表，这些属性不得包含 null 或空字符串。方向默认为 DEFAULT_DIRECTION。
spring.controller.request.param.help.uriComponentsBuilder=用于准备相对于当前请求的主机、端口、方案、上下文路径和 servlet 映射的字面量部分的 URL。
spring.controller.request.param.help.webRequest=扩展 ServletRequest 接口以提供 HTTP servlet 的请求信息。servlet 容器会创建一个 HttpServletRequest 对象并将其作为实参传递给 servlet 的服务方法(doGet、doPost 等)。
spring.controller.request.param.help.webResponse=扩展 ServletResponse 接口以提供发送响应时 HTTP 特定的功能。例如，它具有访问 HTTP 标头和 Cookie 的方法。servlet 容器会创建一个 HttpServletResponse 对象并将其作为实参传递给 servlet 的服务方法(doGet、doPost 等)。
spring.controller.request.param.help.writer=用于访问由 Servlet API 公开的原始响应正文。
spring.controller.request.param.help.zoneId=与当前请求关联的时区，由 LocaleContextResolver 确定。
spring.mvc.controllers.not.found=未找到 Spring MVC 控制器
spring.reactive.web.client.endpoints.view.title=Spring Reactive WebClient
spring.reactive.web.test.client.endpoints.view.title=Spring WebTestClient
spring.rest.client.endpoints.view.title=Spring RestClient
spring.rest.operations.endpoints.view.title=Spring RestOperations
spring.test.mock.mvc.endpoints.view.title=Spring MockMvc
spring.test.rest.template.endpoints.view.title=Spring TestRestTemplate
