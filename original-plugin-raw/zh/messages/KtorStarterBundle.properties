action.Ktor.Add.Plugins.Action.text=添加插件…
action.KtorGenerateOpenApiAction.MainMenu.text=为 Ktor 模块生成 OpenAPI 文档
action.KtorGenerateOpenApiAction.MainMenu.text.named=为 Ktor 模块生成 OpenAPI 文档\: {0}
action.KtorGenerateOpenApiAction.text=为 Ktor 模块生成 OpenAPI 文档
action.MigrateKtorAction.MainMenu.text=将项目迁移到最新的 Ktor 版本…
action.MigrateKtorAction.text=将项目迁移到最新的 Ktor 版本…
action.MigrateKtorAction.update.text=迁移到 Ktor {0}
add.imports.automatically=自动为 Ktor 模块添加导入
advanced.setting.ktor.run.using.gradle=使用 Gradle 运行
advanced.setting.ktor.run.using.gradle.description=默认情况下，IDE 使用 Gradle 构建项目并运行任务。如果禁用，则使用 IDE 运行 Ktor 配置。
advanced.settings.ktor=Frameworks. Ktor
comment.go.to.documentation=从 Ktor 服务器和客户端<a href\="{0}">教程</a>开始
comment.go.to.documentation.link=https\://ktor.io/docs/
create.run.configuration.automatically=自动创建运行配置
creating.ktor.run.configuration=创建 Ktor 运行配置
creating.ktor.run.configuration.for.module=正在为模块 {0} 创建 Ktor 运行配置
error.with.description=错误\: {0}
generate.ktor.project=生成 <b>Ktor</b> 项目。
ktor.add.starters.inlay.hint.provider.description=点击以添加 Ktor 插件。
ktor.add.starters.inlay.hint.provider.name=添加 Ktor 插件
ktor.add.starters.inlay.hint.text=添加插件…
ktor.add.starters.plugin.dialog.wrapper.title=添加插件
ktor.category=Ktor
ktor.client.generator.title=Ktor
ktor.config.property.deprecated=弃用的配置属性 ''{0}''
ktor.config.property.deprecated.reason=已弃用\: {0}
ktor.config.property.folding.empty.value=<空>
ktor.config.property.module.cannot.be.private=模块不能为 private
ktor.config.property.module.cannot.have.parameters=模块不能有形参
ktor.config.property.module.duplicated=模块重复\: ''{0}''
ktor.config.property.module.has.multiple.candidates=模块有多个候选项。可以加载任何一项
ktor.create.extension.test=为 Ktor 路由创建测试
ktor.create.extension.test.title=为 Ktor 路由创建测试
ktor.create.module.test=为 Ktor 模块创建测试
ktor.create.module.test.title=为 Ktor 模块创建测试
ktor.create.new.ktor.client=创建新的 Ktor 客户端
ktor.create.route.test=为 Ktor 路由创建测试
ktor.create.route.test.title=为 Ktor 路由创建测试
ktor.create.test=创建测试
ktor.create.test.button.text=创建
ktor.debugger.label.phase=，阶段\: {0}
ktor.debugger.label.plugin=插件\: {0}
ktor.documentation.description=描述
ktor.documentation.not.loaded=目前无法加载文档。
ktor.documentation.options=选项
ktor.documentation.usage=用法
ktor.endpoints.presentation.title=Ktor HTTP 服务器
ktor.endpoints.websockets.presentation.title=Ktor 服务器 Websocket
ktor.engine.description=处理网络请求的引擎
ktor.enter.valid.function.name.message=请输入有效的 Kotlin 函数名称
ktor.extract.function.extract.button.text=提取
ktor.extract.route.intention.text=将路由提取到单独的方法
ktor.extracted.extension.name=函数名称\:
ktor.failed.to.generate.project=无法生成 Ktor 项目
ktor.folder.not.empty=文件夹不为空\: \n{0}\n某些文件可能会被覆盖。\n\n是否继续?
ktor.folder.not.empty.title=文件夹不为空
ktor.generate.openapi=生成新的 OpenAPI 文档
ktor.generate.openapi.documentation.progress.message.title=正在为模块 {0} 生成 OpenAPI 文档
ktor.generate.openapi.intention=为当前模块生成 OpenAPI 文档
ktor.generate.openapi.progress.message=正在为模块 {0} 生成 OpenAPI 文档
ktor.generate.route.test.action=生成当前路由的测试
ktor.generate.test.for.following.routes=为以下路由生成测试\:
ktor.inline.route.intention.text=内联路由扩展
ktor.inspections.config.yaml=Ktor application.yaml
ktor.inspections.group.key=Ktor
ktor.message.class.already.exists=此软件包中已存在 {0} 类。是否要向此类添加新测试?
ktor.message.symbols.not.allowed.in.testfun=测试函数名称中不允许使用以下符号\: /、'、"
ktor.migration.progress.title=正在迁移到 Ktor {0}
ktor.migration.started=已开始迁移到 Ktor {0}
ktor.migration.unavailable.network=无法执行迁移。Ktor 服务器可能不可用
ktor.migration.unavailable.no.modules=没有可用于迁移的模块
ktor.migration.unavailable.no.version=迁移不可用。无法获取最新版本
ktor.name=Ktor
ktor.no.urls.selected.to.test=未创建测试类，因为未选择任何测试。
ktor.notification.groups.errors=Ktor 错误
ktor.parameter.to.delegate=将 Ktor 形参转换为委托
ktor.parameter.to.delegate.error=不适用于此属性
ktor.perform.migration.dialog.module=迁移单个模块\:
ktor.perform.migration.dialog.ok=迁移
ktor.perform.migration.dialog.preparation=正在准备 Ktor 迁移对话框
ktor.perform.migration.dialog.project=迁移项目
ktor.perform.migration.dialog.title=正在迁移到 Ktor {0}
ktor.perform.migration.dialog.warning=迁移后您可能需要手动修正一些错误
ktor.plugin.add.status.dependencies.added=已添加 {0} 构建系统依赖项
ktor.plugins.added.count=已添加 {0} 插件
ktor.plugins.added.count.single=已添加 1 个插件
ktor.plugins.configurable.github.link=查看插件的 GitHub
ktor.plugins.dependent.remove=依赖于 {0} 的以下插件将被移除\:\n{1}
ktor.plugins.dependent.remove.title=依赖插件
ktor.plugins.hide=隐藏
ktor.plugins.required.add=以下插件将随 {0} 一起添加\:\n{1}
ktor.plugins.required.add.title=必需插件
ktor.plugins.show=显示
ktor.progress.text.getting.latest.migration.for.ktor.server=正在获取 Ktor 服务器的最新迁移…
ktor.progress.text.migrating.module=模块\: {0}
ktor.progress.text.performing.replace=正在替换\: {0}
ktor.progress.text.updating.imports=正在更新 import…
ktor.progress.text.updating.ktor.dependencies=正在更新 Ktor 依赖项…
ktor.route.test.class.name=测试类名\:
ktor.route.test.name=测试名称\:
ktor.run.config.enable.development.mode.tag=开发模式
ktor.run.config.enable.development.mode.tag.description=-Dio.ktor.development\=true
ktor.run.config.enable.development.mode.tag.hint=<html>通过添加虚拟机选项启用开发模式 <code>-Dio.ktor.development\=true</code></html>
ktor.run.config.fragment.group=Ktor
ktor.run.configuration.class.not.specified=未指定 Ktor 应用程序类
ktor.run.configuration.configuration.tab.title=Ktor 配置
ktor.run.configuration.main.class=Ktor 主类
ktor.run.configuration.name=Ktor
ktor.run.configuration.type.description=Ktor 应用程序
ktor.searching.app.extension=正在搜索应用程序扩展程序
ktor.searching.routing.call=正在搜索路由扩展调用
ktor.select.package.test=打包\:
ktor.select.test.routes.table.method.title=方法
ktor.select.test.routes.table.route.title=路由
ktor.select.test.routes.table.test.name.title=测试名称(可编辑)
ktor.swagger.action.multiple.content.roots.for.module={0} 的多个内容根
ktor.swagger.action.notification.content.cannot.create.resources.root.for.swagger.file=无法为 Swagger 文件创建资源根\: {0}
ktor.swagger.action.notification.title.cannot.create.resources.root.for.swagger.file=无法创建新的 OpenAPI 文档
ktor.swagger.action.openapi.folder.already.exists={1} 下已存在 ''{0}'' 文件夹
ktor.swagger.action.openapi.under.sources.root={0} 在源根下
ktor.swagger.already.exists.message=当前模块的 OpenAPI 文档已存在。是否要覆盖它?
ktor.swagger.already.exists.title=覆盖 OpenAPI 文档
ktor.update.openapi.fix=为当前模块更新 OpenAPI 文档
ktor.update.openapi.inspection=当前模块的 OpenAPI 文档已过时
ktor.wizard.combobox.default.tip=默认
ktor.yaml.property.description.application.modules=要加载的 Ktor 模块。
ktor.yaml.property.description.host=主机地址
ktor.yaml.property.description.port=侦听端口。您可以将此属性设置为 0 以在随机端口上运行服务器
ktor.yaml.property.description.rootPath=servlet 上下文路径。
ktor.yaml.property.description.shutdown.url=关闭 URL。请注意，此选项使用 ShutDownUrl 插件。
ktor.yaml.property.description.ssl.keyAlias=SSL 密钥库的别名。
ktor.yaml.property.description.ssl.keyStore=SSL 密钥库。
ktor.yaml.property.description.ssl.keyStorePassword=SSL 密钥库的密码。
ktor.yaml.property.description.ssl.privateKeyPassword=SSL 私钥的密码。
ktor.yaml.property.description.sslPort=侦听 SSL 端口。您可以将此属性设置为 0 以在随机端口上运行服务器
ktor.yaml.property.description.watch=监视用于自动重新加载的路径。
label.advanced.settings=高级设置
label.artifact=工件\:
label.build.system=构建系统\:
label.configuration.in=以下位置中的配置\:
label.group=组\:
label.ktor.version=Ktor 版本\:
label.server.engine=引擎\:
message.failed.to.connect.start.ktor.io=无法连接到 Ktor 生成器网站 start.ktor.io\n请检查 URL、网络和代理设置。\n\n错误消息\: \n{0}
message.state.downloading.project=正在生成 Ktor 项目…
migration.level.none=不建议迁移
migration.level.stable=稳定版
plugins.ide.add.button=添加
plugins.ide.remove.button=移除
presentable.name.ktor.starter=Ktor
title.error=错误
