PhpLanguageFeature.abstract.function.override=从 PHP 7.2 起才允许抽象函数重写
PhpLanguageFeature.abstract.private.trait.methods=从 PHP 8.0 起才允许使用 abstract private 特征方法
PhpLanguageFeature.anonymous.classes=从 PHP 7.0 起才允许使用匿名类
PhpLanguageFeature.anonymous.readonly.classes=从 PHP 8.3 起才允许使用匿名 'readonly' 类
PhpLanguageFeature.arbitrary.static.variable.initializers=从 PHP 8.3 起才允许使用表达式和其他任意 static 变量初始值设定项
PhpLanguageFeature.argument.unpacking=从 PHP 5.6 起才允许使用实参解包
PhpLanguageFeature.array.dereferencing.not.supported=从 PHP 5.4 起才允许对调用进行数组解引用
PhpLanguageFeature.arrow.function=从 PHP 7.4 起才允许箭头函数语法
PhpLanguageFeature.asymmetric.visibility=从 PHP 8.4 起才允许非对称可见性
PhpLanguageFeature.attribute.override=从 PHP 8.3 起才允许使用 '\#[Override]'
PhpLanguageFeature.attributes=从 PHP 8.0 起才允许使用特性
PhpLanguageFeature.binary.literal.not.supported=从 PHP 5.4 起才允许使用二进制字面量
PhpLanguageFeature.built.in.web.server=内置 Web 服务器仅自 PHP 5.4 起可用
PhpLanguageFeature.call.time.pass.by.reference.not.supported=调用时通过引用传递在 PHP 5.4 中已被移除
PhpLanguageFeature.catch.multiple=从 PHP 7.1 起才允许捕获多条语句
PhpLanguageFeature.class.constant.visibility=从 PHP 7.1 起才允许类常量可见性
PhpLanguageFeature.class.member.access.on.instantiation.not.supported=从 PHP 5.4 起才允许对实例化进行类成员访问
PhpLanguageFeature.class.name.const.not.supported=从 PHP 5.5 起才允许使用类名常量
PhpLanguageFeature.class.name.literal.on.object=从 PHP 8.0 起才允许在对象上使用 '\:\:class'
PhpLanguageFeature.coalesce.assign=从 PHP 7.4 起才允许使用 '??\='
PhpLanguageFeature.coalesce.operator=从 PHP 7.0 起才允许使用合并运算符
PhpLanguageFeature.constant.scalar.expressions=从 PHP 5.6 起才允许使用常量标量表达式
PhpLanguageFeature.constants.in.traits=从 PHP 8.2 起才允许在特征中使用常量
PhpLanguageFeature.dynamic.class.constant=从 PHP 8.3 起才允许使用动态类常量提取
PhpLanguageFeature.empty.any.expression.not.supported=从 PHP 5.5 起才允许在 'empty' 中使用任意表达式
PhpLanguageFeature.enum.classes=从 PHP 8.1 起才允许使用枚举
PhpLanguageFeature.exception.throw.from.toString=从 PHP 7.4 起才允许从 ''__toString'' 抛出异常，''{0}.__toString'' 可能会抛出异常
PhpLanguageFeature.explicit.octal.literal=自 PHP 8.1 起只允许显式八进制字面量
PhpLanguageFeature.exponentiation=从 PHP 5.6 起才允许使用求幂
PhpLanguageFeature.final.class.constants=自 PHP 8.1 起只允许使用 'final' 类常量
PhpLanguageFeature.finally.not.supported=从 PHP 5.5 起才允许使用 'Finally' 子句
PhpLanguageFeature.first.class.callable.syntax=从 PHP 8.1 起才允许一级可调用语法
PhpLanguageFeature.flexible.heredocs=灵活的 heredoc/nowdoc 语法
PhpLanguageFeature.foreach.list.not.supported=从 PHP 5.5 起才允许在 foreach 中使用列表
PhpLanguageFeature.generators.not.supported=从 PHP 5.5 起才允许使用生成器
PhpLanguageFeature.grouped.use=从 PHP 7.0 起才允许分组 use 声明
PhpLanguageFeature.immediate.dereferencing.not.supported=从 PHP 5.5 起才允许直接解引用
PhpLanguageFeature.intersection.and.union.in.same.type=从 PHP 8.2 起才允许使用混合交叉类型与联合体类型
PhpLanguageFeature.intersection.types=从 PHP 8.1 起才允许交叉类型
PhpLanguageFeature.iterable.type.hint=从 PHP 7.1 起才允许迭代类型提示
PhpLanguageFeature.keyword.names=在 PHP 7.0 中关键字可用作名称
PhpLanguageFeature.list.assign=从 PHP 7.1 起才允许列表解包中的 []
PhpLanguageFeature.list.keys=从 PHP 7.1 起才允许列表解包中的密钥
PhpLanguageFeature.literal.in.instanceof=从 PHP 7.3 起才允许将字面量作为第一个操作数
PhpLanguageFeature.literal.in.static.call.not.supported=从 PHP 5.4 起才允许在 static 调用中使用字面量
PhpLanguageFeature.match.expression=从 PHP 8.0 起才允许匹配表达式
PhpLanguageFeature.mixed.type.hint=从 PHP 8.0 起才允许 'mixed' 类型提示
PhpLanguageFeature.named.arguments=从 PHP 8.0 起才允许使用命名实参
PhpLanguageFeature.namespaced.name.as.single.token=从 PHP 8.0 起才允许关键字作为命名空间的一部分
PhpLanguageFeature.negative.numeric.indices=从 PHP 7.1 起才允许负数值索引
PhpLanguageFeature.new.in.init=从 PHP 8.1 起才允许在初始值设定项中使用 'new'
PhpLanguageFeature.new.without.parentheses=从 PHP 8.4 起才允许使用不带括号的 'new'
PhpLanguageFeature.non.capturing.catches=从 PHP 8.0 起才允许捕捉异常而又不将异常捕获到变量中
PhpLanguageFeature.nullables=从 PHP 7.1 起才允许可为 null
PhpLanguageFeature.nullsafe.dereferencing=从 PHP 8.0 起才允许 Nullsafe 运算符
PhpLanguageFeature.numeric.literals.separators=从 PHP 7.4 起才允许使用数值字面量分隔符
PhpLanguageFeature.object.type.hint=从 PHP 7.2 起才允许对象类型提示
PhpLanguageFeature.parent.in.closure.not.supported=从 PHP 5.4 起才允许在闭包中使用 parent
PhpLanguageFeature.property.hooks=从 PHP 8.4 起才允许使用属性挂钩
PhpLanguageFeature.property.promotion=从 PHP 8.0 起才允许构造函数属性提升
PhpLanguageFeature.readonly.classes=从 PHP 8.2 起才允许使用 'readonly' 类
PhpLanguageFeature.readonly.properties=从 PHP 8.1 起才允许使用 'readonly' 属性
PhpLanguageFeature.references.in.list=从 PHP 7.3 起才允许在 [] 和 list() 赋值中使用引用
PhpLanguageFeature.return.never=自 PHP 8.1 起才允许使用返回值类型 'never'
PhpLanguageFeature.return.types=从 PHP 7.0 起才允许使用返回值类型声明
PhpLanguageFeature.return.void=从 PHP 7.1 起才允许使用返回值类型 'void'
PhpLanguageFeature.scalar.type.hints=从 PHP 7.0 起才允许使用标量类型提示
PhpLanguageFeature.self.in.closure.not.supported=从 PHP 5.4 起才允许在闭包中使用 self
PhpLanguageFeature.short.array.syntax.not.supported=从 PHP 5.4 起才允许使用短数组语法
PhpLanguageFeature.spaceship.operator=从 PHP 7.0 起才允许使用宇宙飞船运算符
PhpLanguageFeature.spread.operator.in.array=从 PHP 7.4 起才允许在数组中使用展开运算符
PhpLanguageFeature.standalone.null.false=从 PHP 8.2 起才允许将 'null' 和 'false' 用作独立类型
PhpLanguageFeature.static.in.closure.not.supported=从 PHP 5.4 起才允许在闭包中使用 static
PhpLanguageFeature.static.type.hint=从 PHP 8.0 起才允许 'static' 返回值类型声明
PhpLanguageFeature.this.in.closure.not.supported=从 PHP 5.4 起才允许在闭包中使用 $this
PhpLanguageFeature.throw.expression=从 PHP 8.0 起才允许使用 throw 表达式
PhpLanguageFeature.trailing.comma.in.closure.use.list=只有 PHP 8.0 支持在闭包 use 列表中使用尾随逗号
PhpLanguageFeature.trailing.comma.in.function.calls=从 PHP 7.3 起才允许在函数调用中使用尾随逗号
PhpLanguageFeature.trailing.comma.in.group.uses=从 PHP 7.2 起才允许在组使用列表中使用尾随逗号
PhpLanguageFeature.trailing.comma.in.parameter.list=从 PHP 8.0 起才允许在形参列表中使用尾随逗号
PhpLanguageFeature.traits.not.supported=从 PHP 5.4 起才允许使用特征
PhpLanguageFeature.true.type=从 PHP 8.2 起才允许使用名为 'true' 的类型提示
PhpLanguageFeature.typed.class.constants=从 PHP 8.3 起才允许使用类型化类常量
PhpLanguageFeature.typed.properties=从 PHP 7.4 起才允许使用类型化属性
PhpLanguageFeature.uniform.variable.syntax=从 PHP 7.0 起才允许统一变量语法
PhpLanguageFeature.union.types=从 PHP 8.0 起才允许联合体类型
PhpLanguageFeature.use.function.and.const=从 PHP 5.6 起才允许 use function 和 use const
PhpLanguageFeature.var.break.argument.not.supported=PHP 5.4 不再支持具有非常量操作数的 'break' 运算符
PhpLanguageFeature.var.break.zero.argument.not.supported=自 PHP 5.4 起，'break' 运算符仅接受正数
PhpLanguageFeature.var.continue.not.supported=PHP 5.4 不再支持具有非常量操作数的 'continue' 运算符
PhpLanguageFeature.var.continue.zero.not.supported=自 PHP 5.4 起，'continue' 运算符仅接受正数
PhpLanguageFeature.variadic.functions=从 PHP 5.6 起才允许使用可变函数
PhpLanguageLevel.5.3.0.presentable.name=5.3
PhpLanguageLevel.5.3.0.short.description=命名空间，闭包
PhpLanguageLevel.5.4.0.presentable.name=5.4
PhpLanguageLevel.5.4.0.short.description=特征，短数组语法
PhpLanguageLevel.5.5.0.presentable.name=5.5
PhpLanguageLevel.5.5.0.short.description=finally，生成器
PhpLanguageLevel.5.6.0.presentable.name=5.6
PhpLanguageLevel.5.6.0.short.description=可变函数，实参解包
PhpLanguageLevel.7.0.0.presentable.name=7.0
PhpLanguageLevel.7.0.0.short.description=返回值类型，标量类型提示
PhpLanguageLevel.7.1.0.presentable.name=7.1
PhpLanguageLevel.7.1.0.short.description=常量可见性，可为 null，多个异常
PhpLanguageLevel.7.2.0.presentable.name=7.2
PhpLanguageLevel.7.2.0.short.description=对象类型提示，abstract 函数重写
PhpLanguageLevel.7.3.0.presentable.name=7.3
PhpLanguageLevel.7.3.0.short.description=列表赋值中的引用，灵活的 heredoc
PhpLanguageLevel.7.4.0.presentable.name=7.4
PhpLanguageLevel.7.4.0.short.description=类型属性，短闭包，null 合并运算符
PhpLanguageLevel.8.0.0.presentable.name=8.0
PhpLanguageLevel.8.0.0.short.description=联合体类型，命名实参，特性，match 表达式
PhpLanguageLevel.8.1.0.presentable.name=8.1
PhpLanguageLevel.8.1.0.short.description=枚举、'never' 返回值类型、交叉类型、'readonly' 属性
PhpLanguageLevel.8.2.0.presentable.name=8.2
PhpLanguageLevel.8.2.0.short.description='readonly' 类，'true' 类型，独立的 'null' 和 'false'
PhpLanguageLevel.8.3.0.presentable.name=8.3
PhpLanguageLevel.8.3.0.short.description=类型化类常量
PhpLanguageLevel.8.4.0.presentable.name=8.4
PhpLanguageLevel.8.4.0.short.description=不带圆括号的 'new'、属性挂钩、不对称可见性
array.index=数组索引
class.name=类名
class.reference=类引用
color.settings.alias.primitive.type.hint=标识符//基元类型提示
color.settings.alias.reference=标识符//别名引用
color.settings.attributes=特性
color.settings.bad_character=未知字符
color.settings.braces=大括号和运算符//大括号
color.settings.brackets=大括号和运算符//中括号
color.settings.class=类和属性//类
color.settings.comma=大括号和运算符//逗号
color.settings.comment=注释
color.settings.concatenation=字符串//串联
color.settings.constant=标识符//常量
color.settings.doc.identifier=PHPDoc//标识符
color.settings.doc.method.identifier=PHPDoc//方法声明
color.settings.doc.parameter=PHPDoc//形参
color.settings.doc.property.identifier=PHPDoc//属性
color.settings.doc.template.type=PHPDoc//模板类型
color.settings.doc.var=PHPDoc//变量
color.settings.doccomment=PHPDoc//文本
color.settings.docmarkup=PHPDoc//标记
color.settings.doctag=PHPDoc//标记
color.settings.dql.builder.expr=DQL 构建器//表达式
color.settings.dql.builder.placeholder=DQL 构建器//占位符
color.settings.escape_sequence=字符串//转义序列
color.settings.exec_command=Shell 命令
color.settings.function=函数和方法//声明
color.settings.function.call=函数和方法//函数调用
color.settings.goto.label=标识符//转到标签
color.settings.heredoc_content=Heredoc//Heredoc 内容
color.settings.heredoc_id=Heredoc//Heredoc ID
color.settings.identifier=标识符//默认
color.settings.instance.field=类和属性//实例属性
color.settings.instance.method=函数和方法//实例方法调用
color.settings.instance.private.field=类和属性//private 实例属性
color.settings.instance.private.method=函数和方法//private 实例方法调用
color.settings.instance.protected.field=类和属性//protected 实例属性
color.settings.instance.protected.method=函数和方法//protected 实例方法调用
color.settings.interface=类和属性//接口
color.settings.keyword=关键字
color.settings.magic.member=标识符//魔术成员访问
color.settings.name=PHP
color.settings.named.arguments=命名实参
color.settings.number=数字
color.settings.operation=大括号和运算符//运算符
color.settings.parameter=函数和方法//形参
color.settings.parentheses=大括号和运算符//圆括号
color.settings.php.scripting=PHP 代码//后台
color.settings.php.tags=PHP 代码//标记
color.settings.predefined.symbols=标识符//预定义符号
color.settings.semicolon=大括号和运算符//分号
color.settings.static.field=类和属性//static 属性
color.settings.static.method=函数和方法//static 方法调用
color.settings.string=字符串//字符
color.settings.this.var=标识符//'$this' 变量
color.settings.var=标识符//变量
color.settings.var_var=标识符//可变变量
default.value=默认值
exception.class=异常类
expected.class.reference=应为\: 类引用
expected.expression=应为\: 表达式
expected.property=属性
expression1=表达式
extends=扩展
extends.or.implements=扩展或实现
field.name=字段名称
filetype.php.description=PHP
identifier=标识符
initializer=初始值设定项
interface.name=接口名称
label1=标签
line.separator=行分隔符
modifier=修饰符
object.property=对象属性
parser.expected=应为\: {0}
parser.unexpected=意外\: {0}
parsing.error.at.expected=应为 '@'
parsing.error.expression.not.assignable=表达式不可赋值
parsing.error.method.label.expected=应为方法标签
parsing.error.not.allowed=不允许使用 ''{0}''
parsing.error.statement.expected=应为语句
parsing.error.unexpected.token=意外的标记\: {0}
property.or.function=属性或函数
return.type=返回值类型
static.value=static 值
type=类型
variable1=变量
