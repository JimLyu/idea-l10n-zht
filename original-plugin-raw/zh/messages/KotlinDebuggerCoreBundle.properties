find.inline.calls.task.compute.names=为声明 {0} 计算类名
find.inline.calls.task.cancelled=调试器可以跳过 {0} 的一些执行，因为类名的计算已中断

alternative.sources.notification.title=可用于文件 {0} 的替代源
alternative.sources.notification.hide=隐藏

function.breakpoint.tab.title=Kotlin 函数断点
function.breakpoint.initialize=初始化函数断点

line.breakpoint.tab.title=Kotlin 行断点
line.breakpoint=行断点
line.and.lambda.breakpoint=行和 {0,choice,1#Lambda|2#Lambda} 断点

filter.ignore.internal.classes=不步入 Kotlin 运行时库实现类
always.do.smart.step.into=始终进行智能步入
variables.disable.coroutine.agent.values=禁用协同程序代理
variables.disable.coroutine.agent.tooltip=对 Gradle 和 Java 运行配置禁用协同程序代理

stepping.over.inline=单步跳过内联

message.class.has.no.properties=类没有属性
message.variables.property.get=... get()

filters.text.inline.function.body=内联函数体
filters.text.inline.function.call.site=内联函数调用站点
filters.title.navigate.to=导航到
configurable.name.kotlin=Kotlin

property.watchpoint.tab.title=Kotlin 属性断点
property.watchpoint.access=属性和访问
property.watchpoint.modification=属性和修改
property.watchpoint.initialization=属性和初始化
property.watchpoint.error.couldnt.find.0.class=找不到 ''{0}'' 类

property.watchpoint.properties.panel.option.pass.count=合格次数(&P):
property.watchpoint.properties.panel.option.class.filters=类筛选器(&L):
property.watchpoint.properties.panel.option.instance.filters=实例筛选器(&I):
property.watchpoint.properties.panel.panel.group.conditions=筛选器

property.watchpoint.add.dialog.title=添加属性观察点
property.watchpoint.add.dialog.choose.owner.class.title=选择属性所有者类
property.watchpoint.add.dialog.choose.owner.class.label=类的完全限定名称:
property.watchpoint.add.dialog.choose.property.label=属性名称:
property.watchpoint.add.dialog.chooser.title={0,choice, 0#类没有属性|1#选择属性}