inspection.missing.doc.comment.parameter.item=不匹配的 doc 注释和函数签名
inspection.missing.localization=缺少本地化
inspection.redundant.attribute=冗余特性
inspection.redundant.closure=冗余闭包
inspection.redundant.nullable.type=冗余的可以为 null 类型
inspection.redundant.return=冗余 'return'
inspection.unnecessary.argument.list=闭包前的空实参圆括号
inspection.unnecessary.parentheses=不必要的圆括号
inspection.unnecessary.self=不必要的 'self'
inspection.unnecessary.tuple.wrap=不必要的元组换行
intention.access.control.error.access=无法访问 {0}\: 它在{2}中为{1}
intention.access.control.error.access.dynamic=无法访问 {0}\: 动态成员下标在 {2} 中为 {1}
intention.access.control.fix=在 {2} 中使{0} {1}
intention.access.control.remove.setter=从 {0} 移除 {1}
intention.add.digit.separators=添加数字分隔符
intention.add.explicit.qualifier=添加显式限定符
intention.add.explicit.type=添加显式类型
intention.category.swift=Swift
intention.convert.to.binary=转换为二进制
intention.convert.to.closure.argument=转换为闭包实参
intention.convert.to.decimal=转换为十进制
intention.convert.to.hex=转换为十六进制
intention.convert.to.multiline.string=转换为多行字符串字面量
intention.convert.to.octal=转换为八进制
intention.convert.to.string=转换为单行字符串字面量
intention.convert.to.trailing.closure=转换为尾随闭包
intention.decrease.string.escape.level=降低字符串转义级别
intention.demorgans.law=德摩根定律
intention.extract.conformance.to.extension.cannot.add.protocol.conformance.to.protocol=协议扩展无法符合其他协议
intention.extract.conformance.to.extension.familyName=将一致性提取到扩展
intention.extract.conformance.to.extension.type.cannot.be.local=无法在局部作用域中创建扩展
intention.extract.conformance.to.extension.type.must.be.fileprivate=类型必须至少为 fileprivate
intention.extract.from.extension.to.type.declaration.familyName=将成员提取到其原始类型声明
intention.extract.from.extension.to.type.declaration.original.analysis.on.type.not.allowed=原始类型声明超出作用域
intention.extract.from.extension.to.type.declaration.original.type.not.found=找不到原始类型声明
intention.extract.member.to.extension.cannot.extract.from.protocol=无法从协议中提取
intention.extract.member.to.extension.type.cannot.be.local=无法在局部作用域中创建扩展
intention.extract.member.to.extension.type.must.be.fileprivate=类型必须至少为 fileprivate
intention.extract.members.to.extension.familyName=将成员提取到扩展
intention.flip.binary.expression=翻转二元表达式
intention.flip.comparison=翻转比较
intention.generate.documentation.comment=添加文档注释
intention.implement.equals=实现缺少的 equals
intention.implement.hash=实现缺少的 hash
intention.implement.members.implement.missing=实现 {0} 个缺少的{0, choice,1\#成员|2\#成员}
intention.implement.missing.equals.hash=实现缺少的 equals 和 hash
intention.increase.string.escape.level=提高字符串转义级别
intention.invert.if.statement=反转 'if' 语句
intention.join.declaration.and.assignment=联接声明和赋值
intention.localize.string=本地化字符串
intention.merge.conditions=合并条件
intention.merge.else.if=合并 'else if'
intention.merge.nested.if=合并嵌套的 'if'
intention.negate.comparison=求反比较
intention.remove.digit.separators=移除数字分隔符
intention.remove.explicit.type=移除显式类型
intention.replace.guard.with.if=将 'guard' 替换为 'if'
intention.replace.if.with.guard=将 'if' 替换为 'guard'
intention.simplifyifelse.familyName=简化 if-else
intention.split.condition=拆分为单独的条件
intention.split.declaration.and.assignment=拆分为声明和赋值
intention.split.else.if=拆分 'else if'
intention.split.nested.if=拆分为嵌套的 'if'
intention.unresolved.reference.0.1=导入{0} ''{1}''
intention.unwrap.with.guard.let=使用 'guard let' 解包
intention.unwrap.with.if.let=使用 'if let' 解包
swift.name=Swift
