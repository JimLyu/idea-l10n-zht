action.add.schema.title=创建架构
action.clear.output=清除输出
action.clone.schema.title=克隆架构
action.consume.start.title=开始使用
action.consume.stop.title=停止使用
action.create.topic=创建主题
action.delete.topic=删除主题
action.delete.topic.multi.message=是否删除 {0} 个主题?
action.delete.topic.single.message=是否删除主题“{0}”?
action.delete.topic.title=删除
action.diff.select.two.message=要比较架构，请选择两个版本
action.diff.version.title=显示差异
action.produce.stop=停止生产
action.remove.preset=从收藏夹中移除预设
action.remove.schema.confirm.dialog.msg.permanent=主题“{0}”已被软删除。是否永久删除?
action.remove.schema.confirm.dialog.msg.soft=是否删除主题“{0}”?
action.remove.schema.version.confirm.ok=删除
action.remove.version.confirm.dialog.msg=是否删除主题“{1}”的版本 {0}?
action.remove.version.confirm.dialog.option=永久删除
action.remove.version.title=删除版本
action.save.preset=将预设保存到收藏夹
action.show.deleted.subject.title=显示软删除的主题
action.table.stats=表统计信息
config.name.default=Kafka
connection.admin.is.not.initialized=Kafka 管理客户端未初始化
connection.check.port.success.but.next.error=URL 可访问，但 Kafka 无法连接。请检查是否设置了正确的身份验证机制
connection.is.not.found.in.config=在连接属性中找不到 {0}
connection.kafka.registry.is.not.available=Kafka 注册表不可用
consume.from.topic=从主题使用
consumer.error.topic.empty=未选择主题
consumer.error.topic.empty.title=使用者错误
consumer.filter.type.contains=包含
consumer.filter.type.none=无
consumer.filter.type.notContains=不包含
consumer.filter.type.regexp=RegExp
consumer.last.update.label.canceled=已取消
consumer.last.update.label.comment=最后更新时间
consumer.last.update.label.initializing=正在执行...
consumer.limit.type.date=日期
consumer.limit.type.none=无
consumer.limit.type.partitionMaxSize=分区最大大小
consumer.limit.type.partitionRecords=分区记录号
consumer.limit.type.topicMaxSize=主题最大大小
consumer.limit.type.topicRecords=主题记录号
consumer.partition.not.found=找不到主题 {0} 的所选分区。
consumer.preset.filter=筛选器: {0}
consumer.preset.header.key=标头键: {0}
consumer.preset.header.value=标头值: {0}
consumer.preset.key=键: {0}
consumer.preset.limit=限制 {0} {1}
consumer.preset.no.topic=无主题
consumer.preset.value=值: {0}
consumer.producer.format.type=按类型分组:
consumer.producer.key.group=键
consumer.producer.value.group=值
consumer.record.headers=标头:
consumer.record.key=键:
consumer.record.keysize=键大小:
consumer.record.offset=偏移:
consumer.record.partition=分区:
consumer.record.timestamp=时间戳:
consumer.record.topic=主题:
consumer.record.value=值:
consumer.record.valuesize=值大小:
consumer.records.limit=使用者记录限制
consumer.records.limit.descr=当记录数达到限制时，将清除客户端上的旧记录。<br>负数，'0' 或空值表示没有限制。
consumer.start.type.beginning=从开头
consumer.start.type.consumerGroup=使用者组
consumer.start.type.lastHour=过去 1 小时
consumer.start.type.latestOffsetMinusX=最新偏移量减去 X
consumer.start.type.now=立即
consumer.start.type.offset=偏移
consumer.start.type.specificDate=具体日期
consumer.start.type.today=今天
consumer.start.type.yesterday=昨天
consumer.table.awaiting=正在等待数据
create.consumer.action.title=添加使用者
create.producer.action.title=添加生产者
create.producer.and.consumer.action.title=添加生产者和使用者
create.topic.leave.empty.for.default=默认留空
datamanager.schema.details=架构详情
datamanager.schema.details.tags=标签
dialog.create.topic.name=名称:
dialog.create.topic.num.partition=分区号:
dialog.create.topic.replication.factor=复制系数:
diff.dialog.button.update=更新
diff.dialog.title=架构之间的区别
edit.schema.info=更新架构
error.configuration.glue.is.not.setup=未配置 Glue 架构注册表
error.confluent.client.is.not.inited=内部错误。未初始化 Confluent 客户端。请尝试刷新连接
error.glue.client.is.not.inited=内部错误。未初始化 Glue 客户端。请尝试刷新连接
error.glue.connection.is.disabled=已禁用 Glue 连接
error.glue.connection.is.not.found=未附加 Glue 连接
error.glue.schema.is.not.found=找不到架构 {0} ({1})。请尝试刷新连接
error.glue.wrong.format=字段格式错误。应为 {0}，但为 {1} 定义了架构
error.start.consumer=使用者错误
field.type.avro.registry=Avro (架构注册表)
field.type.base64=字节(Base64)
field.type.double=Double
field.type.float=Float
field.type.json=JSON
field.type.json.registry=JSON (架构注册表)
field.type.long=Long
field.type.null=无
field.type.protobuf.registry=Protobuf (架构注册表)
field.type.string=String
field.viewer.type.auto=自动
field.viewer.type.base64=Base64
field.viewer.type.json=JSON
field.viewer.type.text=文本
kafka.auth.aws_iam=AWS IAM
kafka.auth.basic=基本身份验证
kafka.auth.bearer=持有者
kafka.auth.enable.server.host.name.indetification=验证服务器主机名称
kafka.auth.method.label=身份验证:
kafka.auth.none=无
kafka.auth.sasl.use.ssl=启用 SSL
kafka.auth.sasls=SASL
kafka.auth.ssl=SSL
kafka.auth.type.kerberos=Kerberos
kafka.auth.type.plain=纯
kafka.auth.type.scram256=SCRAM-SHA-256
kafka.auth.type.scram512=SCRAM-SHA-512
kafka.broker.group.title=Kafka 代理
kafka.key.password=密钥密码:
kafka.keystore.location=密钥库位置:
kafka.keystore.password=密钥存储密码:
kafka.password=密码:
kafka.producer.action.produce.title=生成
kafka.property.source.field=隐式
kafka.property.source.file=来自文件
kafka.property.source.label=属性源:
kafka.sasl.mechanism=SASL 机制:
kafka.ssl.use.keystore=使用 Keystore 客户端身份验证
kafka.token=令牌:
kafka.truststore.location=信任库位置:
kafka.truststore.location.dialog.title=选择信任库位置
kafka.truststore.password=信任库密码:
kafka.username=用户名:
label.filter.head.key=标头键:
label.filter.head.value=标头值:
label.filter.key=键:
label.filter.value=值:
open.settings.action.text=设置
produce.to.topic=生产到主题
producer.asks=ACK:
producer.compression=压缩:
producer.error.topic.empty=未选择主题
producer.error.topic.empty.title=生产者错误
producer.forcePartition=强制分区:
producer.forcePartition.emptytext=全部
producer.idempotence.label=幂等性
producer.json.value.comment=以 JSON 格式提供与架构对应的有效负载。
producer.key=键:
producer.preset.apply=将预设应用到设置
producer.preset.key=键 [{0}]: {1}
producer.preset.no.key=无键
producer.preset.no.topic=无主题
producer.preset.no.value=无值
producer.preset.none=无
producer.preset.topic=主题: {0}
producer.preset.value=值 [{0}]: {1}
producer.title.headers=标头
producer.title.options=选项
producer.topics=主题:
producer.value=值:
producer.wrong.partition=主题 {1} 的错误分区 {0}
property.file.is.not.found=找不到 Kafka 属性 {0}
record.headers.label=标头:
registry.format.avro=AVRO
registry.format.json=JSON
registry.format.protobuf=Protobuf
registry.format.topic.record=主题+记录名称
registry.info.dialog.title=方案“{0}”
registry.key=键
registry.strategy.custom.subject=自定义架构
registry.strategy.record=记录名称
registry.strategy.topic=主题名称
registry.subject.combobox.default.name=选择注册表架构
registry.tab.fields=字段
registry.tab.schema.info=信息
registry.tab.versions=版本
registry.value=值
schema.info.arn=ARN:
schema.info.compability=兼容性模式:
schema.info.description=描述:
schema.info.format=数据格式:
schema.info.last.updated=上次更新:
schema.info.name=名称:
schema.info.registry=注册表:
schema.info.version=最新版本:
schema.registry.add.schema.dialog.field.format=格式:
schema.registry.add.schema.dialog.field.schema.name=架构名称:
schema.registry.deleted=主题已被软删除
schema.registry.type.label=按类型分组
schema.type.confluent=Confluent
schema.type.glue=Glue
schema.type.none=无
settings.advanced=高级设置
settings.filter=筛选器:
settings.filters.from=起点:
settings.filters.limit=限制:
settings.format.registry.schema=模式:
settings.glue.driver.id=Glue 连接:
settings.glue.registry.name=注册表名称:
settings.glue.registry.title=选择 Glue 注册表
settings.group.name=Kafka
settings.label.topics=主题:
settings.partitions=分区:
settings.properties=高级属性:
settings.properties.file=属性文件:
settings.properties.file.browse=Kafka 属性文件
settings.property.source=配置源:
settings.property.source.file=属性
settings.registry.tab=架构注册表
settings.registry.title=架构注册表(可选)
settings.registry.url=URL:
settings.registry.url.hint=http://localhost:8081
settings.title.partitions=分区
settings.title.range.filters=范围和筛选器
settings.url.must.be.non.empty.hint=引导服务器不得为空
settings.url.text.empty=server1,server2
settings.url.text.hint=使用 "," 分隔符指定代理列表 (server1,server2)
show.edit.schema.diff.new.name=新架构
show.edit.schema.diff.prev.name=最新版本:
show.edit.schema.diff.title=更新主题: {0}
show.full.topic.config=显示完整配置
show.full.topic.config.hint=显示完整配置
show.internal.topic=显示内部主题
show.internal.topic.hint=显示内部主题
show.schema.info=显示架构
table.stats.memory=内存:
table.stats.speed=速度:
table.stats.total=总计:
table.stats.visible=可见:
toggle.data=数据
toggle.details=详细信息
toggle.presets=预设
toggle.settings=设置
toolwindow.title=Kafka
topic.not.found=找不到主题 {0}
topic.tab.configs=配置
topic.tab.partitions=分区
update.dialog.title=更新架构