
kotlin.jupyter.action.create.notebook.text=Kotlin Jupyter Notebook
kotlin.jupyter.action.create.notebook.description=创建新的 Kotlin Notebook
kotlin.jupyter.action.create.notebook.dialog.title=新建 Kotlin Notebook
kotlin.jupyter.action.create.notebook.dialog.kind=新建 Kotlin Notebook
kotlin.jupyter.action.create.notebook.name=创建 Kotlin Notebook {0}
jkt.meta.description.help=显示帮助
jkt.meta.description.classpath=显示当前类路径
jkt.meta.description.vars=获取可视变量值
jkt.meta.description.use=为支持的库注入代码: 工件解析、默认 import、初始化代码、类型呈现器
jkt.meta.description.output=管理输出捕获设置
jkt.meta.description.trackClasspath=记录类路径变更。适用于调试工件解析失败
jkt.meta.description.trackExecution=记录正在执行的代码。适用于调试库支持
jkt.meta.description.dumpClassesForSpark=将编译后的 REPL 类存储在特殊目录中，以便与 Spark 集成
jkt.meta.description.useLatestDescriptors=使用最新可用版本的库描述符。默认情况下，会使用捆绑的描述符
jkt.meta.description.logLevel=设置日志记录级别
jkt.meta.description.logHandler=管理日志记录处理程序
kotlin.jupyter.text.move.notebook.out.of.source.root=此 Kotlin Notebook 位于源根内，这可能会导致问题。请将其移到源根之外。
kotlin.jupyter.settings.title=Kotlin Notebook
kotlin.jupyter.settings.JDK.path=JDK 路径
kotlin.jupyter.toolbar.title=Kotlin 内核: {0}
kotlin.jupyter.toolbar.tabs.log={0} 的日志
kotlin.jupyter.toolbar.actions.stop=停止内核
kotlin.jupyter.refactor.compiled.script=重构已编译的脚本成员不会对字节码产生任何影响。请考虑适当的重新声明。
kotlin.jupyter.refactor.changed.definition=重构声明不会对现有的 {0} 用法产生影响。
kotlin.jupyter.refactor.changed.definition.rerun=考虑执行单元格以使更改在整个笔记本中生效。
kotlin.jupyter.toolbar.session.name=Kotlin 内核会话
plugin.updater.notification.group=有可用的 Kotlin Notebook 插件更新