inspection.jvm.languages.group.name=JVM 语言
jvm.inspections.sql.source.to.sink.flow.display.name=不安全字符串被用作 SQL
jvm.inspections.sql.source.to.sink.flow.too.complex=太复杂，无法检查 SQL 中使用的字符串是否安全
jvm.inspections.sql.source.to.sink.flow.unsafe=在 SQL 中使用的字符串可能不安全
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field=将同一类中的 private 或 final 字段视为安全字段
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field.comment=如果启用，则 private 或 final 字段被认为是安全的，否则将根据规则进行处理
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods=将 private 方法的形参视为安全
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods.comment=如果禁用，private 方法的形参将被视为未知
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex=报告过于复杂而无法验证的字符串
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex.comment=手动检查此类字符串可能很有用
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class=安全类\:
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class.comment=这些类被视为只包含安全数据
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations=未被污染的注解\:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations.comment=这些注解将在分析过程中用作 '@Untainted' 注解
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods=未被污染的方法\:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods.comment=这些方法被视为只返回安全的对象
