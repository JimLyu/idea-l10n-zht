#Thu Jan 11 15:31:36 MSK 2024
displayname.replace.project.with.project.in=将 Project() 替换为 project.in()
displayname.sbt=sbt
downloading.list.of.templates=正在下载模板列表…
downloading.template=正在下载模板…
group.sbt=sbt
initializing.sbt.shell.message=正在初始化 sbt shell…
packagesearch.dependency.version.inspection.description=库依赖项有较新的稳定版本
packagesearch.newer.stable.version.available={0}\:{1} 有较新的稳定版本
packagesearch.update.dependency.to.newer.stable.version=将依赖项更新到较新的稳定版本 {0}
sbt.annotation.blankLineRequired=在 0.13.7 版(您的版本是 {0})以前的 *.sbt 文件中，需要用空行来分隔表达式
sbt.annotation.expectedExpressionType=sbt 文件中预期的表达式类型为 Def.SettingsDefinition
sbt.annotation.expectedExpressionTypeSbt0136=sbt 文件中预期的表达式类型为 DslEntry
sbt.annotation.expressionMustConform=表达式类型 {0} 必须符合 sbt 文件中的 Def.SettingsDefinition
sbt.annotation.expressionMustConformSbt0136=表达式类型 {0} 必须符合 sbt 文件中的 DslEntry
sbt.annotation.sbtFileMustContainOnlyExpressions=sbt 文件只能包含表达式
sbt.available.opts=所有可用选项\: {0}
sbt.based.scala.project.recommended=基于 sbt 的 Scala 项目(推荐)
sbt.build.file.changes=sbt 构建文件更改
sbt.build.file.modification=sbt 构建文件修改
sbt.build.modified.automatically=已自动修改
sbt.build.modified.automatically.and.fixed.manually=已自动修改和手动修正
sbt.build.modified.detected=已检测
sbt.build.modified.manually=已手动修改
sbt.commands=sbt 命令
sbt.download.sbt.sources=下载 sbt 源代码(对于编辑项目定义很有用)
sbt.download.scala.standard.library.sources=下载 Scala 标准库源代码(对于编辑源代码很有用)
sbt.events=事件
sbt.extracting.project.structure.from.sbt=正在从 sbt 提取项目结构
sbt.extracting.project.structure.from.sbt.shell=正在从 sbt shell 提取项目结构
sbt.import.cancelled=sbt 导入已取消\: {0}
sbt.import.check.root.node.for.details=检查树的根节点以获取更多详细信息
sbt.import.detecting.jdk=正在检测 SBT 的 JDK
sbt.import.errors.project.reload.aborted=发生导入错误，已中止项目重新加载
sbt.import.extracting.structure.failed=提取结构失败
sbt.import.message.build.status=构建状态\: {0}
sbt.import.message.structure.file.is.empty=结构文件 {0} 为空
sbt.import.message.structure.file.is.not.a.file=结构文件 {0} 不是文件
sbt.import.noCustomJvmFound=无法确定所选 JDK 中的 Java VM 可执行文件
sbt.import.noProjectJvmFound=无法确定当前项目 SDK 中的 Java VM 可执行文件
sbt.import.to.intellij.project.model=导入到 IntelliJ 项目模型
sbt.inspection.projectIn.name=将 Project() 替换为 project.in()
sbt.launcher.not.found=在 {0} 中找不到 sbt 启动器
sbt.local.cache=本地缓存
sbt.module.step.download.sources=下载源
sbt.named.sbt.commands.defined.in.this.project=此项目中定义的命名 sbt 命令
sbt.project.import=sbt 项目导入
sbt.project.structure.extracted=已提取项目结构
sbt.runner.choose.working.directory=选择工作目录
sbt.runner.description=运行 sbt 任务
sbt.runner.displayName=sbt 任务
sbt.runner.form.environmentVariables=环境变量\:
sbt.runner.form.tasks=任务\:
sbt.runner.form.tasksEditorTitle=任务
sbt.runner.form.use.sbt.shell=使用 sbt shell
sbt.runner.form.vmParameters=虚拟机参数\:
sbt.runner.form.vmParametersEditorTitle=虚拟机参数
sbt.runner.form.working.directory=工作目录\:
sbt.settings=sbt 设置
sbt.settings.defined.in.this.project=此项目中定义的 sbt 设置
sbt.settings.download=下载\:
sbt.settings.env.variables=环境变量(&E)
sbt.settings.implicitImports=隐式 import
sbt.settings.maxHeapSize=最大堆大小(MB)(&M)
sbt.settings.noImplicitImportsFound=找不到隐式 import
sbt.settings.project.jdk=项目 JDK\:
sbt.settings.remoteDebug=启用调试
sbt.settings.remoteDebug.tooltip=以可调试的进程启动 sbt shell。允许调试 sbt 插件代码和 sbt shell 中运行的测试
sbt.settings.resolveClassifiers=库源代码
sbt.settings.resolveClassifiers.tooltip=从 sbt 重新加载项目时下载项目库依赖项的源
sbt.settings.resolveSbtClassifiers=sbt 源代码
sbt.settings.resolveSbtClassifiers.tooltip=从 sbt 重新加载项目时下载 sbt 和 sbt 插件的源
sbt.settings.resolvers=解析器
sbt.settings.resolvers.name=名称
sbt.settings.resolvers.url=URL
sbt.settings.sbt=sbt(&S)\:
sbt.settings.sbt.launcher.bundled=已捆绑
sbt.settings.sbt.launcher.custom=指定自定义启动器
sbt.settings.sbt.launcher.error.jar.is.not.valid.file=所选 jar 不是有效文件
sbt.settings.sbtLauncher=&启动器(sbt-launch.jar)
sbt.settings.sbtModuleSettings=sbt
sbt.settings.sbtOptions=&SBT 选项
sbt.settings.sbtOptions.tooltip=如果在将 SBT 选项映射到虚拟机参数之后，将与已经定义的参数发生冲突或重复，那些从 SBT 选项派生的参数将优先
sbt.settings.sbtVersionInModule=sbt 版本
sbt.settings.sbtVersionNotDetected=未检测
sbt.settings.scala=Scala(&C)\:
sbt.settings.scalaVersionPreference=打开交叉编译 Scala 3 / Scala 2 项目为\:
sbt.settings.scalaVersionPreference.tooltip=针对 Scala 2 和 Scala 3 交叉编译的项目实际上并不使用 Scala 3 功能，且可以作为 Scala 2 (更可靠)打开
sbt.settings.shell.title=sbt shell
sbt.settings.useShell=用于\:
sbt.settings.useShellForBuild=内部版本
sbt.settings.useShellForBuild.tooltip=在 sbt shell 中构建项目。推荐用于 sbt 构建配置，这些配置会导致在 IntelliJ IDEA 编译器中的编译工作无法正常进行
sbt.settings.useShellForImport=项目重新加载
sbt.settings.useShellForImport.tooltip=项目从 sbt shell 而不是新的 sbt 进程中重新加载。这样可以减少重新加载时间，但需要 sbt shell 才能留在内存中
sbt.settings.vmParams=&VM 形参
sbt.shared.source.module.description=在编译期间，某个共享源代码模块的依赖项混入模块源代码而不是模块输出中
sbt.shared.sources.module=共享源代码模块
sbt.shell.action.help=帮助
sbt.shell.action.help.description=在 sbt shell 中获取帮助
sbt.shell.action.inspect.setting=检查
sbt.shell.action.inspect.setting.description=在 sbt shell 中检查设置
sbt.shell.action.inspect.task=检查
sbt.shell.action.inspect.task.description=在 sbt shell 中检查任务
sbt.shell.action.run.command=运行
sbt.shell.action.run.command.description=在 sbt shell 中运行命令
sbt.shell.action.run.task=运行
sbt.shell.action.run.task.description=在 sbt shell 中运行任务
sbt.shell.action.show.setting=显示值
sbt.shell.action.show.setting.description=在 sbt shell 中显示设置
sbt.shell.action.show.task=显示结果
sbt.shell.action.show.task.description=在 sbt shell 中显示任务结果
sbt.shell.attach.debugger=将调试器附加到 sbt shell
sbt.shell.build.interrupted=构建已中断
sbt.shell.configure.project.jdk=配置项目 JDK(&C)
sbt.shell.configure.sbt.jvm=配置 sbt JVM(&C)
sbt.shell.ctrl.d.eof=Ctrl+D EOF
sbt.shell.debug=调试 sbt shell
sbt.shell.enable.debugging.in.sbt.settings=在 sbt 设置中启用 sbt shell 调试，并重启 shell 以附加调试器
sbt.shell.error.build.interrupted=错误\: 构建已中断
sbt.shell.errors.in.build=构建中存在错误
sbt.shell.no.jre.found.at.path=在路径 {0} 中找不到 JRE。改用项目 JDK。
sbt.shell.no.project.jdk.configured=未配置项目 JDK，但必须配置才能运行 sbt shell。
sbt.shell.refresh.sbt.project=刷新 sbt 项目
sbt.shell.restart=重启 sbt shell
sbt.shell.sbt.build=sbt 构建
sbt.shell.sbt.build.failed=sbt 构建失败
sbt.shell.start=启动 sbt shell
sbt.shell.status.busy=繁忙
sbt.shell.status.initializing=正在初始化
sbt.shell.stop=停止 sbt shell
sbt.shell.stopping.process=正在停止 sbt shell 进程
sbt.shell.synchronizing.output.directories=正在同步输出目录…
sbt.shell.title=sbt shell
sbt.shell.unable.to.build.sbt.project=无法构建与 IDEA 模块 {0} 相对应的 sbt 项目。
sbt.shell.warnings.in.build=构建中存在警告
sbt.sincesbtversion.required=需要 sbt {0}+。请更新项目 build.properties。
sbt.source.sets=SBT 源集
sbt.task.canceled=任务已取消
sbt.tasks=sbt 任务
sbt.tasks.defined.in.this.project=此项目中定义的 sbt 任务
sbt.techhub.downloading.location=正在下载 {0}
sbt.techhub.lightbend.project.starter=Lightbend 项目启动器
sbt.techhub.no.response.status.from.connection.to.url={0} 连接无响应状态
sbt.techhub.response.to.connection.to.url.was.status={0} 连接的响应为 ''{1}''
sbt.techhub.sbt.based.project.from.a.lightbend.tech.hub.template=Lightbend Tech Hub 模板中基于 sbt 的项目
sbt.unknown.cause=未知原因
sbt.unrecognised.opt=无法识别的 sbt 选项\: {0}。
sbt.unrecognized.opt.with.suggestion=无法识别的 sbt 选项\: {0}。您指的是 {1} 吗?
sbt.unrecognized.opts=无法识别的 sbt {0, choice, 1\#选项|2\#选项}\: {1}
scala.sdk.must.be.set=必须设置 Scala SDK
scala.version.requires.library.version=Scala {0} 需要 {1} {2}
select.template=选择模板
template.for.dependency=依赖项模板
template.for.dependency.built.with.sbt=使用 sbt 构建的依赖项模板
wrong.library.version={0} 版本错误
