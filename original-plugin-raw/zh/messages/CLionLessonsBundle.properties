change.signature.dialog.title=更改签名
clion.basic.editing.module.description=Actions that help you edit your code
clion.basic.editing.module.name=Code Editing
clion.change.signature.click.refactor=Click on the {0} button to perform the refactoring.
clion.change.signature.conclusion=请注意，<ide/> 已相应调整所有调用点，现在正在将字符串文字 {0} 作为第二个形参传递给 {1}。
clion.change.signature.extract.parameter=现在，按 {0} 以使用形参重构。
clion.change.signature.help.link=“更改签名”重构
clion.change.signature.lesson.intro=“更改签名”重构结合了可应用于函数签名的多项不同修改。您可以使用此重构更改函数名称和返回值类型，以及添加、移除形参，对形参重新排序。\n更改函数签名时，CLion 会搜索该函数的所有用法，并更新函数的可以安全修改以反映更改的所有调用、实现和重写替换。
clion.change.signature.lesson.name=更改签名
clion.change.signature.move.parameter.down=点击向下按钮或按 {2}，将 {0} 形参移至 {1} 形参下方。
clion.change.signature.next.button=下一页
clion.change.signature.open.dialog=在此示例中，{0} 函数期望目标作为其第一个形参，源作为其第二个形参，一些用户可能会觉得这不直观。我们来将它们翻转过来。
clion.change.signature.open.dialog.press=按 {0} 打开“更改签名”对话框。
clion.change.signature.refactor.button=重构
clion.change.signature.select.parameter.1=虽然“更改签名”可用于在一个对话框中执行许多不同的更改，但修改函数签名的一些特定重构也有其自己的专用操作。
clion.change.signature.select.parameter.2=<strong>形参</strong>重构可用于将局部变量或表达式转换为函数形参。在此示例中，函数 {0} 打印以逗号分隔的范围的元素。我们来将分隔符字符串转换成新形参。
clion.change.signature.select.parameter.3=按 {0} 选择分隔符字符串。
clion.change.signature.type.new.parameter.name=<ide/> 现在已将字符串文字转换为新的函数形参。我们只需要给它一个有意义的名称。输入 {0}。
clion.change.signature.type.new.parameter.refactor=按 {0} 执行重构。
clion.collapse.all.collapse=如果要收起文件中的所有区域，请按 {0}。
clion.collapse.all.expand=Similarly, press {0} to expand all available regions.
clion.collapse.help.link=Expand or collapse code elements
clion.collapse.hit.expand=To expand a code region, press {0}.
clion.collapse.lesson.name=收起
clion.collapse.region.collapse=您可以收起任何所选代码段并为其创建自定义折叠区域以使其“可折叠”。尝试选择第 6-8 行中的三个成员变量，并使用“{0}”折叠选区。
clion.collapse.try.collapse=Sometimes you need to collapse a piece of code for better readability. Try to collapse a code fragment with {0}.
clion.comments.comment.block=You can comment out a block of code. For example, let''s comment out the selected block, press {0}.
clion.comments.comment.one.line=Comment out any line with {0}.
clion.comments.help.link=高级编辑
clion.comments.lesson.name=Add and remove comments
clion.comments.uncomment.line=Uncomment the commented line with the same shortcut, {0}
clion.completion.complete.statement=Press {0} to complete this statement.
clion.completion.module.description=Let the IDE complete your code. Try basic, smart, and other types of completion.
clion.completion.module.name=代码补全
clion.debug.workflow.lesson.name=Debug workflow
clion.extract.and.inline.lesson.name=提取和内联
clion.extract.constant=按 {0} 将此处用于计算圆面积的 pi 文字值提取为常量。
clion.extract.constant.expression.literal=选择数字文字作为要提取的表达式。
clion.extract.constant.help.link=Extract constant
clion.extract.constant.intro=<ide/> 为您的 C++ 代码提供了许多有用的就地重构。例如，<strong>提取常量</strong>重构可以帮助您消除硬编码常量，使代码更易于阅读和维护。
clion.extract.constant.replace.occurrences=由于相同的数字文字多次出现，<ide/> 为您提供了替换所有匹配项或仅替换这一个匹配项的选项。选择“{0}”。
clion.extract.constant.replace.occurrences.item=替换全部 2 个匹配项
clion.extract.extend.selection=按三次 {1} 选择表达式 {0}。
clion.extract.function=现在，按 {0} 将所选代码提取到函数中。
clion.extract.function.button.name=提取
clion.extract.function.click.extract=现在，点击<strong>提取</strong>以执行重构。
clion.extract.function.click.inline=点击<strong>内联</strong>按钮进行确认。
clion.extract.function.conclusion=您还可以使用内联重构来内联常量和预处理器宏。
clion.extract.function.dialog=“提取函数”对话框可用于指定新函数的声明位置、返回值类型和名称。
clion.extract.function.inline.button.name=内联
clion.extract.function.intro=代码现在好多了，但我们可以应用更多重构。<ide/> 允许您使用<strong>提取函数</strong>将任何表达式或代码段提取到单独的函数中。对于下一行中的表达式，我们将其提取到一个单独的函数而不是局部变量中。
clion.extract.function.new.function.name=将名称设置为 {0}。
clion.extract.inline=点击“{0}”，然后按 {1}。
clion.extract.inline.done=<ide/> 现在再次内联了 {0}，撤消了我们之前进行的“提取函数”重构。
clion.extract.inline.intro=<ide/> 现在已将周长的计算重构为新函数。然而，有时您想进行相反的操作\: 去除函数并在调用点内联其主体。为了实现这一点，<ide/> 具有<strong>内联</strong>重构，这与“提取函数”重构相反。
clion.extract.lesson.name=Extract variable
clion.extract.new.constant.name=输入 {0} 作为新常量的名称，然后按 {1}。
clion.extract.new.constant.type=Specify a new variable type or leave it as suggested. Press {0} to continue the refactoring.
clion.extract.new.variable.name=输入 {0} 作为新局部变量的名称，然后按 {1}。
clion.extract.variable=按 {0} 将表达式提取到变量中。
clion.extract.variable.declare.const=声明 const
clion.extract.variable.expression=然后，选择“{0}”
clion.extract.variable.expression.option=现在，您有一些其他选项来声明新的局部变量。选择“声明 const”。
clion.extract.variable.help.link=Extract/Introduce variable
clion.extract.variable.intro=现在，硬编码值消失，但表达式仍然很长。我们来通过<strong>提取变量</strong>重构将圆的面积提取到局部变量中。
clion.inline.help.link=内联
clion.intn.name.replace.if=Replace 'if else' with '?\:'
clion.multiple.selections.deselect.symbol=Press {0} to deselect the last occurrence.
clion.multiple.selections.escape=Press {0} to reset multiple selections and return to the single caret mode.
clion.multiple.selections.help.multiple.carets=多个文本光标和选择范围
clion.multiple.selections.lesson.name=Multiple selections
clion.multiple.selections.replace=Type {0} to replace all occurrences of {1} with {0}.
clion.multiple.selections.select.all=Press {0} to select all occurrences in the file.
clion.multiple.selections.select.next.symbol=Press {0} again to select the next occurrence of this symbol.
clion.multiple.selections.select.symbol=Press {0} to select the symbol at the caret.
clion.onboarding.apply.action=Select the {0} action and press {1}.
clion.onboarding.apply.intention=选择使形参成为常量引用的操作，然后按 {0}。
clion.onboarding.balloon.about.debug.panel=“{0}”工具窗口为工具栏提供了各种调试操作。您可以稍后在“{1}”课次中进行尝试。
clion.onboarding.balloon.click.here=Click here to set a breakpoint
clion.onboarding.balloon.open.file=Double-click to open {0}
clion.onboarding.balloon.open.learn.toolbar=切换到“{0}”工具窗口继续学习本课次
clion.onboarding.balloon.project.directory=Double-click the project directory to expand it and view the project files
clion.onboarding.balloon.project.view=Click to open the <strong>Project</strong> view
clion.onboarding.balloon.start.debugging=点击图标开始调试或按 {0}。
clion.onboarding.balloon.stop.debugging=Click the icon to stop debugging
clion.onboarding.case.changed=The case has changed.
clion.onboarding.change.ui.settings=在本课次中，<ide/> 会将某些 UI 设置更改为默认状态。完成或退出课次后，将恢复您的偏好设置。
clion.onboarding.epilog=恭喜\! 您已完成入门导览。此时，您可以\:\n- <callback id\="{0}">关闭</callback>学习项目{1}\n- <callback id\="{2}">显示</callback>更多课次
clion.onboarding.feedback.system.found.toolchain=找到的工具链\:
clion.onboarding.feedback.system.no.toolchain=无
clion.onboarding.feedback.system.used.toolchain=使用的工具链\:
clion.onboarding.finish.exit=Close Demo Project
clion.onboarding.finish.modules=显示更多课次
clion.onboarding.finish.text=您刚刚完成了 <ide/> 入门导览。\n现在可以关闭学习项目{0}。\n您也可以继续学习，尝试其他课次。
clion.onboarding.finish.title=Congratulations
clion.onboarding.indexing.description=第一次打开项目时，<ide/> 会扫描标准模板库和项目本身，以收集编码辅助所需的详细信息。要继续，请等待索引完成。
clion.onboarding.invoke.completion=现在，我们输入一个 {0} 来显示所有可用的补全选项。
clion.onboarding.invoke.completion.tip=<strong>提示</strong>\: 您可以按 {0} 在代码的任何位置显示补全条目。
clion.onboarding.invoke.intention.for.code=意图可以节省您的时间，让编码变得更容易，让您的代码更安全、更高效。在这里，{0} 按值传入 {1}，这意味着每次调用 {1} 时都会复制它。这样效率很低。让我们用一个意图来消除不必要的复制。按 {2}。
clion.onboarding.invoke.intention.for.warning.1=您刚刚修正了一个错误，但还可以进一步改进这段代码。<ide/> 会高亮显示可以改进的代码行，并为这些行添加黄色灯泡。
clion.onboarding.invoke.intention.for.warning.2=按 {0} 预览警告并应用快速修复。
clion.onboarding.invoke.search.everywhere.1=在 <ide/> 中进行处理时，您可能想要搜索项目中的文件、符号、类，乃至 IDE 操作。在本课次中，我们将搜索 {0} 操作，以将 {1} 字符串改为小写。
clion.onboarding.invoke.search.everywhere.2=Press {0} two times to open the {1} dialog.
clion.onboarding.lesson.name=Get acquainted with {0}
clion.onboarding.module.description=A brief overview of the main features in {0}
clion.onboarding.module.name=Onboarding Tour
clion.onboarding.no.toolchain=为了编译并运行代码，您首先需要<callback id\="{0}">配置</callback> C/C++ 编译器。
clion.onboarding.project.view.description=<strong>项目</strong>视图是主要工具窗口之一。它包含项目目录、外部库和临时文件。点击带条纹的按钮可以预览演示项目内容。您也可以按 {0} 打开。
clion.onboarding.return.to.welcome=\ and return to the Welcome screen
clion.onboarding.run.options=您已经打开了演示项目。现在，我们来运行它吧\! 在工具栏的高亮显示区域中，您可以看到所选配置的常用运行操作。例如，您可以构建代码 {0}、运行代码 {1}、调试代码 {2}、使用覆盖率运行 {3}、分析代码 {4}，以及使用 Memcheck 运行 {5}。
clion.onboarding.run.sample=For now, let''s run the current file, click {0} or press {1}.
clion.onboarding.run.sample.balloon=我们来运行当前文件，点击“{0}”或按 {1}.
clion.onboarding.search.everywhere.description=As you can see, the selected text, {0}, has been automatically copied into the input string. Let''s type {1} instead of {0}.
clion.onboarding.select.fix=Apply the first item\: {0}. With this fix, your code looks neat.
clion.onboarding.select.item=<ide/> 会在您输入时自动显示补全选项。使用键盘上的箭头选择“{0}”条目，然后按 {1}。
clion.onboarding.start.debugging=Click the {0} icon to start the debugging process.
clion.onboarding.start.typing=And then start typing {0} to reduce the completion list or select this item and press {1}.
clion.onboarding.stop.debugging=Let''s stop debugging. Click the {0} icon.
clion.onboarding.toggle.breakpoint.1=您可能会注意到 {1} 函数没有返回预期值 {0}，而是返回 {2}。我们来查看 return 语句，调试有问题的代码。
clion.onboarding.toggle.breakpoint.2=点击高亮显示区域内的装订区域以设置断点。
clion.onboarding.toggle.case.part=大/小文字
clion.onboarding.toolchain.description=<ide/> 已经为此课程配置了默认的 C/C++ 工具链。您可以对其进行修改或为您的项目重新创建一个。为此，请转到“偏好设置 -> 构建、执行、部署 -> 工具链”。
clion.onboarding.toolchain.tip=<strong>提示</strong>\: 您可以在 <ide/> 偏好设置中的“构建、执行、部署 -> 工具链”下配置 C/C++ 工具链。
clion.onboarding.type.division=发现代码中的问题后，我们来进行修正。将得到的和除以值的长度。课次脚本已插入 {0}。
clion.postfix.completion.complete=Select {0} from the list and press {1} to complete the statement.
clion.postfix.completion.type=对于 C++，后缀补全对于使用 C++ 样式的转换、`make_shared`/`make_unique`、各种循环和 `begin`/`end` 习惯用法进行包装的情况特别有用。在类名后键输入 {0} 以查看后缀补全的选项。
clion.qfix.name.remove.parameter=移除形参 'redundant' 的声明
clion.quick.fix.use.range.based.loop="改用基于范围的 for 循环"
clion.rad.change.signature.move.parameter.down=Move the {0} parameter below the {1} parameter by clicking the Move down button.
clion.rad.intn.name.replace.if=Convert 'if' statement to '?\:' expression
clion.rad.qfix.name.remove.parameter=Remove unused parameter
clion.rad.rename.again=You might have noticed that the rename refactoring did not automatically rename the occurrence of {0} inside this comment. The Rename refactoring has an additional option which allows you to do this. Try to rename {0} to {1} again. Click into any occurrence of the typename {0} in the code, and press {2}.
clion.refactorings.module.description=Make your code neat with rename, extract, and other types of refactorings.
clion.refactorings.module.name=Refactorings
clion.rename.again=您可能已经注意到，“重命名”重构确实会自动重命名此注释内 {0} 的匹配项。“重命名”重构有一些附加选项，其中之一允许我们执行此操作。再次尝试将 {0} 重命名为 {1}。点击代码中类型名称 {0} 的任何匹配项，然后按 {2}。
clion.rename.applied=<ide/> 现在更改了声明/定义以及所有用法中类模板的名称。这将应用于整个项目。
clion.rename.conclusion=<ide/> 现在再次更改了类模板的名称，但与以前不同的是，这不会影响注释。
clion.rename.description=The Rename refactoring allows you to rename symbols, files, and directories globally with all the references to them in the code corrected automatically.
clion.rename.dialog.title=重命名
clion.rename.disable.update.option=禁用“同时在注释和字符串中重命名”
clion.rename.enable.update.option=Enable "{0}"
clion.rename.help.link=Rename refactorings
clion.rename.lesson.name=重命名
clion.rename.next.button=下一页
clion.rename.option.text=Search in comments and string literals
clion.rename.press.rename=按 {0} 可重命名类模板 {1}。
clion.rename.show.option.popup=点击要重命名的元素旁边的图标或按 {0} 以访问其他选项。
clion.rename.type.new.name=为此类模板输入一个新名称(例如 {0})，然后按 {1}。
clion.rename.undo=与每次重构一样，重命名类型可以通过“撤消”轻松撤消。按 {0}。
clion.selection.select.string=Press {0} again to select the whole string.
clion.smart.completion.finish.completion=Select {0} and press {1}.
clion.smart.completion.help.link=Type-matching completion
clion.smart.completion.introduction=智能类型补全会筛选建议列表，从而只包含当前上下文中适用的类型。
clion.smart.completion.use.smart.completion=在这种情况下，只有将枚举 {0} 的值传递给函数 {1} 才有意义。按 {2} 查看匹配建议的列表。请注意，仅显示不同的 {0} 枚举值。
clion.statement.completion.complete.condition=Add a condition inside the parentheses {0} and press {1} to jump into the {2} statement.
clion.statement.completion.complete.finish.body=Type a line of code\: {0} and then press {1} to complete the statement and apply formatting.
clion.statement.completion.complete.for=Press {0} to complete the {1} statement.
clion.statement.completion.complete.if=Type {0} and press {1} to generate the statement.
clion.statement.completion.help.link=Statement completion
clion.statement.completion.lesson.intro1=您可以使用语句补全创建语法正确的代码结构。该功能会插入必要的语法元素(圆括号、大括号和分号)，并使您处于可以开始输入下一条语句的位置。
clion.statement.completion.lesson.intro2=补全语句适用于补全声明(例如，类、命名空间和枚举)和语句(<code>if/else</code>、<code>while</code>、<code>do</code>、<code> >for</code>、<code>switch/case</code>、<code>try/catch</code>)。
clion.statement.completion.lesson.name=Statement completion
clion.tab.completion.lesson.intro=使用 Tab (而不是回车键)补全不是简单地插入所选建议，而是完全替换文本光标处的单词。这对于快速修正代码非常有用，因为您不必手动选择和移除单词。
clion.tab.completion.lesson.name=Tab 补全
clion.tab.completion.select.item=Select the {0} item using the keyboard arrows or just start typing it.
clion.tab.completion.start.completion=假设您想将此处的 {0} 替换为 {1} 类成员。按 {2} 可查看补全建议。
clion.tab.completion.use.tab.completion=If you press {0}, you will insert {1} before {2}. Instead, press {3} to replace {2} with {1}.
toolbar.settings.button=IDE and Project Settings
unwrap.try=解包 'if...'
