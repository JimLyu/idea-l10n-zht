filetype.flow.description=Flow JS
filetype.flow.display.name=Flow JS
filetype.javascript.description=JavaScript
filetype.jsx.description=JSX
filetype.jsx.display.name=JSX
filetype.typescript.config.description=TypeScript 配置
filetype.typescript.config.display.name=TypeScript 配置
filetype.typescript.description=TypeScript
filetype.typescript.jsx.description=TypeScript JSX
interface.function.declaration.should.have.no.body=接口函数声明不应有本体
interface.should.have.no.variable.declarations=接口不应有变量声明
javascript.ambient.declaration.should.have.no.body=环境声明不应有本体
javascript.parser.message.are.not.supported.by.dialect=当前 JavaScript 版本不支持 {0}
javascript.parser.message.expected.as=应为 'as'
javascript.parser.message.expected.at=应为 @
javascript.parser.message.expected.case.or.default=应为 'case' 或 'default'
javascript.parser.message.expected.checks=应为 'checks'
javascript.parser.message.expected.class=应为 'class'
javascript.parser.message.expected.colon=应为 \:
javascript.parser.message.expected.colon.or.comma=应为 \: 或 ,
javascript.parser.message.expected.comma=应为 ,
javascript.parser.message.expected.comma.or.rbrace=应为 , 或 }
javascript.parser.message.expected.comma.or.rparen=应为 , 或 )
javascript.parser.message.expected.declaration=应为声明
javascript.parser.message.expected.declare=应为 'declare'
javascript.parser.message.expected.dot=应为 .
javascript.parser.message.expected.eqgt=应为 \=>
javascript.parser.message.expected.equal=应为 \=
javascript.parser.message.expected.exports=应为 'exports'
javascript.parser.message.expected.expression=应为表达式
javascript.parser.message.expected.forloop.in.or.semicolon=应为 'in' 或 ;
javascript.parser.message.expected.forloop.left.hand.side.expression.or.variable.declaration='in' 前面应为左侧表达式或变量声明
javascript.parser.message.expected.forloop.using.not.allowed.in.for-in='for-in' 循环中不允许使用 'using'
javascript.parser.message.expected.formal.parameter.name=应为形参名称
javascript.parser.message.expected.from=应为 'from'
javascript.parser.message.expected.function.name=应为函数名称
javascript.parser.message.expected.gt=应为 >
javascript.parser.message.expected.identifier=应为标识符
javascript.parser.message.expected.identifier.lbrace.or.lbracket=应为标识符、{ 或 [
javascript.parser.message.expected.identifier.or.value=应为标识符或值
javascript.parser.message.expected.identifier.string.literal.or.lbrace=应为标识符、字符串字面量或 {
javascript.parser.message.expected.identifier.string.literal.or.numeric.literal=应为标识符、字符串字面量或数字字面量
javascript.parser.message.expected.identifier.string.literal.or.rbrace=应为标识符、字符串字面量或 }
javascript.parser.message.expected.import.specifier=应为导入说明符
javascript.parser.message.expected.import.value=应为导入绑定或说明符
javascript.parser.message.expected.in=应为 'in'
javascript.parser.message.expected.instanceof=应为 'instanceof'
javascript.parser.message.expected.lbrace=应为 {
javascript.parser.message.expected.lbrace.or.semicolon=应为 { 或 ;
javascript.parser.message.expected.lbracket=应为 [
javascript.parser.message.expected.lparen=应为 (
javascript.parser.message.expected.meta=仅接受 'meta'、'source' 或 'defer' 作为 import 的元属性
javascript.parser.message.expected.mult.or.lbrace=应为 * 或 {
javascript.parser.message.expected.name=应为名称
javascript.parser.message.expected.name.or.lbrace=应为软件包名称或 {
javascript.parser.message.expected.namespace=应为 'namespace'
javascript.parser.message.expected.newline.or.semicolon=需要换行符或分号
javascript.parser.message.expected.one.of=应为 {0} 之一。
javascript.parser.message.expected.parameter.name=应为形参名称
javascript.parser.message.expected.property.name=应为属性名称
javascript.parser.message.expected.question=应为 ?
javascript.parser.message.expected.rbrace=应为 }
javascript.parser.message.expected.rbracket=应为 ]
javascript.parser.message.expected.readonly=应为 'readonly'
javascript.parser.message.expected.rparen=应为 )
javascript.parser.message.expected.semicolon=应为 ;
javascript.parser.message.expected.statement=应为语句
javascript.parser.message.expected.string.literal=应为字符串字面量
javascript.parser.message.expected.target=仅接受 'target' 作为要新建的元属性
javascript.parser.message.expected.tuple.comma.or.rbracket=应为 , 或 ]
javascript.parser.message.expected.type=应为类型
javascript.parser.message.expected.type.keyword=应为 'type'
javascript.parser.message.expected.type.member=应为类型成员
javascript.parser.message.expected.type.name=应为类型名称
javascript.parser.message.expected.typename=应为类型名称
javascript.parser.message.expected.typename.or.*=* 应为 * 或类型名称
javascript.parser.message.expected.value=应为值
javascript.parser.message.expected.variable.name=应为变量名称
javascript.parser.message.expected.while.keyword=应为 'while'
javascript.parser.message.expected.xml=应为 XML 上下文关键字
javascript.parser.message.expected.xml.element=应为 XML 元素
javascript.parser.message.missing.attribute.name=缺少特性名称
javascript.parser.message.missing.back.quote=缺少 `
javascript.parser.message.missing.or_rbrace=缺少 |}
javascript.parser.message.missing.rbrace=缺少 }
javascript.parser.message.missing.rbracket=缺少 ]
javascript.parser.message.missing.rparen=缺少 )
javascript.parser.message.missing.tag.name=缺少标记名称
javascript.parser.message.unclosed.comment=未闭合注释
javascript.parser.message.unclosed.string.literal=未闭合的字符串字面量
javascript.parser.message.unexpected.end.of.file=意外的文件结尾
javascript.parser.message.unexpected.token=意外的标记 {0}
javascript.parser.property.expected=应为属性
js.language.feature.annotations=注解
js.language.feature.arbitrary.precision.integers=任意精度整数
js.language.feature.arrow.functions=箭头函数
js.language.feature.async.await=async/await
js.language.feature.binary.0b.and.new.octal.0o.literals=二进制(0b)和新的八进制(0o)字面量
js.language.feature.bind.expressions=绑定表达式
js.language.feature.class.member.visibility.modifiers=类成员可见性修饰符
js.language.feature.classes=类
js.language.feature.computed.property.names=计算的属性名称
js.language.feature.const.definitions=Const 定义
js.language.feature.decorator.declarations=装饰器声明
js.language.feature.default.parameter.values=默认形参值
js.language.feature.destructuring.assignments=析构赋值
js.language.feature.destructuring.parameters=析构形参
js.language.feature.ecmascript.syntax.for.private.members=私有成员的 ECMAScript \#- 语法
js.language.feature.enums=枚举
js.language.feature.es6.export.declarations=ES6 导出声明
js.language.feature.es6.import.declarations=ES6 导入声明
js.language.feature.for.each.statements=针对每条语句
js.language.feature.for.of.loops=for..of 循环
js.language.feature.generators=生成器
js.language.feature.generics=泛型
js.language.feature.getters.and.setters=getter 和 setter
js.language.feature.interfaces=接口
js.language.feature.let.definitions=Let 定义
js.language.feature.method.definition.shorthands=方法定义速记形式
js.language.feature.nullish.coalescing=Null 合并运算符
js.language.feature.optional.catch.bindings=可选 catch 绑定
js.language.feature.optional.chaining.operator=可选链接运算符
js.language.feature.pipe.expressions=管道表达式
js.language.feature.reference.namespace=引用命名空间
js.language.feature.rest.parameters=rest 形参
js.language.feature.shorthand.property.names=速记属性名称
js.language.feature.string.templates=字符串模板
js.language.feature.throw.expressions=抛出表达式
js.language.feature.trailing.commas.in.function.parameter.lists.and.calls=函数形参列表和调用中的尾随逗号
js.language.feature.types=类型
js.language.feature.unicode.escapes.with.braces=使用大括号的 Unicode 转义
js.language.feature.xml.tags=XML 标记
